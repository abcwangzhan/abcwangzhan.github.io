{"version":3,"sources":["pages/Login/Login.tsx"],"names":["Login","history","useHistory","useState","formValues","setFormValues","useMutation","USER_LOGIN","onCompleted","loginRes","loginSuccess","onError","show","loginReq","useLazyQuery","USER_SHOW","fetchPolicy","data","getUserInfoSuccess","getUserInfo","storage","setLocal","StorageKey","TOKEN","signIn","token","nickName","artScience","ejuSubject","replace","handleChange","value","type","vals","placeholder","onChange","val","name","size","mt","onClick","email","password","info","emailReg","test","pwdReg","checkValues","variables","md5","toString","push"],"mappings":"0VAgHeA,EA9FS,WACtB,IAAMC,EAAUC,cAChB,EAAoCC,mBAA0B,IAA9D,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmBC,YAAYC,IAAY,CACzCC,YAAa,SAACC,GAAD,OAAcC,EAAaD,IACxCE,QAAS,kBAAM,IAAMC,KAAK,+BAFrBC,EAAP,oBAIA,EAAsBC,YAAaC,IAAW,CAC5CC,YAAa,oBACbR,YAAa,SAACS,GAAD,OAAUC,EAAmBD,MAFrCE,EAAP,oBAMMT,EAAe,SAACO,GAA+C,IAAD,EAElEG,IAAQC,SAASC,IAAWC,OAAW,OAAJN,QAAI,IAAJA,GAAA,UAAAA,EAAMO,cAAN,eAAcC,QAAS,IAE1DN,KAGID,EAAqB,SAACD,GAE1B,MAA6CA,EAAKE,YAA1CO,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WAAYC,EAA9B,EAA8BA,YAGzBF,IAFiBC,GAAoC,kBAAfA,IACrBC,GAAoC,kBAAfA,EAEzC3B,EAAQ4B,QAAQ,aAEhB5B,EAAQ4B,QAAQ,MAmCdC,EAAe,SAACC,EAAeC,GACnC3B,GAAc,SAAC4B,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBD,EAAOD,QAE9C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,yDACA,uBACEG,YAAY,oDACZC,SAAU,SAACC,GAAD,OAAeN,EAAaM,EAAK,UAC3CC,KAAK,UAEP,uBAAYC,KAAK,OACjB,uBACEJ,YAAY,iCACZF,KAAK,WACLK,KAAK,WACLF,SAAU,SAACC,GAAD,OAAeN,EAAaM,EAAK,eAE7C,kBAAC,IAAD,CAAeJ,KAAK,UAAUO,GAAG,QAAQC,QA5BzB,WAClB,GAtBkB,WAClB,IAAQC,EAAoBrC,EAApBqC,MAAOC,EAAatC,EAAbsC,SACf,QAAQ,GACN,MAAOD,EACL,IAAME,KAAK,8CACX,MACF,KAAKC,IAASC,KAAKJ,GAAS,IAC1B,IAAME,KAAK,4EACX,MACF,MAAOD,EACL,IAAMC,KAAK,8CACX,MACF,KAAKG,IAAOD,KAAKH,GAAY,IAC3B,IAAMC,KAAK,sIACX,MACF,QACE,OAAO,EAEX,OAAO,EAIHI,GAAe,CACjB,IAAQN,EAAoBrC,EAApBqC,MAAOC,EAAatC,EAAbsC,SAEf7B,EAAS,CACPmC,UAAW,CAAEP,QAAOC,SAAUO,IAAIP,GAAY,IAAIQ,iBAuBpD,gBAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYV,QAAS,kBAAYvC,EAAQkD,KAAK,eAA9C,kCAGA,kBAAC,IAAD","file":"17.2027d4d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { WhiteSpace, InputItem, Toast } from 'antd-mobile';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { USER_LOGIN, USER_SHOW } from '@/helpers/APIHelper';\r\nimport storage from '@/utils/storage';\r\nimport StorageKey from '@/constants/StorageKey';\r\nimport md5 from 'crypto-js/md5';\r\nimport { LoginFormValues, UserInfo } from './types';\r\nimport { emailReg, pwdReg } from './regs';\r\nimport {\r\n  Page,\r\n  PageTitle,\r\n  PrimaryButton,\r\n  OthersBox,\r\n  OthersItem,\r\n} from './styles';\r\n\r\nconst Login: React.FC = () => {\r\n  const history = useHistory();\r\n  const [formValues, setFormValues] = useState<LoginFormValues>({}); // 表单值\r\n  const [loginReq] = useMutation(USER_LOGIN, {\r\n    onCompleted: (loginRes) => loginSuccess(loginRes),\r\n    onError: () => Toast.show('登录失败'),\r\n  });\r\n  const [getUserInfo] = useLazyQuery(USER_SHOW, {\r\n    fetchPolicy: 'cache-and-network',\r\n    onCompleted: (data) => getUserInfoSuccess(data),\r\n  });\r\n\r\n  // 登录成功后操作\r\n  const loginSuccess = (data: { signIn: { token: string } }): void => {\r\n    console.log(data);\r\n    storage.setLocal(StorageKey.TOKEN, data?.signIn?.token || '');\r\n    // 查询用户信息\r\n    getUserInfo();\r\n  };\r\n  // 获取用户信息\r\n  const getUserInfoSuccess = (data: { getUserInfo: UserInfo }): void => {\r\n    console.log(data);\r\n    const { nickName, artScience, ejuSubject } = data.getUserInfo;\r\n    const noArtScience = !artScience && typeof artScience !== 'number';\r\n    const noEjuSubject = !ejuSubject && typeof ejuSubject !== 'number';\r\n    if (!nickName || noArtScience || noEjuSubject) {\r\n      history.replace('/complete');\r\n    } else {\r\n      history.replace('/');\r\n    }\r\n  };\r\n  // 表单校验\r\n  const checkValues = (): boolean => {\r\n    const { email, password } = formValues;\r\n    switch (false) {\r\n      case !!email:\r\n        Toast.info('请输入电子邮箱');\r\n        break;\r\n      case emailReg.test(email || ''):\r\n        Toast.info('请输入正确的电子邮箱格式');\r\n        break;\r\n      case !!password:\r\n        Toast.info('请输入账号密码');\r\n        break;\r\n      case pwdReg.test(password || ''):\r\n        Toast.info('请输入8-24位包含大小写字母数字及特殊字符的密码');\r\n        break;\r\n      default:\r\n        return true;\r\n    }\r\n    return false;\r\n  };\r\n  // 提交登录\r\n  const handleLogin = (): void => {\r\n    if (checkValues()) {\r\n      const { email, password } = formValues;\r\n      console.log({ variables: { email, password } });\r\n      loginReq({\r\n        variables: { email, password: md5(password || '').toString() },\r\n      });\r\n    }\r\n  };\r\n  // 表单值改变\r\n  const handleChange = (value: string, type: string): void => {\r\n    setFormValues((vals) => ({ ...vals, [type]: value }));\r\n  };\r\n  return (\r\n    <Page>\r\n      <PageTitle>欢迎来到菓子题库</PageTitle>\r\n      <InputItem\r\n        placeholder=\"请输入邮箱/用户名\"\r\n        onChange={(val): void => handleChange(val, 'email')}\r\n        name=\"email\"\r\n      />\r\n      <WhiteSpace size=\"lg\" />\r\n      <InputItem\r\n        placeholder=\"请输入密码\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        onChange={(val): void => handleChange(val, 'password')}\r\n      />\r\n      <PrimaryButton type=\"primary\" mt=\"286px\" onClick={handleLogin}>\r\n        登录\r\n      </PrimaryButton>\r\n      <OthersBox>\r\n        <OthersItem onClick={(): void => history.push('/register')}>\r\n          新用户注册\r\n        </OthersItem>\r\n        <OthersItem>忘记密码</OthersItem>\r\n      </OthersBox>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}