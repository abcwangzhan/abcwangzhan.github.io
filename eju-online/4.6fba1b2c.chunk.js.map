{"version":3,"sources":["pages/Library/Exam/Parsing/Parsing.tsx"],"names":["Parsing","history","useHistory","state","useContext","ProviderContext","examQuestion","examSelectAnswer","type","color","onClick","go","dots","style","height","map","qusItem","index","sourceType","questionId","question","subject","date","checkAnswers","parse","letterTemp","letterStr","split","letterTrueTemp","prevSelect","className","dateToYear","length","item","itemLabel","splice","join","item2","answer"],"mappings":"iRAgIeA,EAxGW,WACxB,IAAMC,EAAUC,cACRC,EAAUC,qBAAWC,KAArBF,MACR,EAAqDA,EAA7CG,oBAAR,MAAuB,GAAvB,IAAqDH,EAA1BI,wBAA3B,MAA8C,GAA9C,EACA,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uBACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAYT,EAAQU,IAAI,OAGrC,kBAAC,IAAD,KACE,uBAAUC,MAAM,EAAOC,MAAO,CAAEC,OAAQ,SAAxC,OACGR,QADH,IACGA,OADH,EACGA,EAAcS,KAAI,SAACC,EAASC,GAC3B,IACEC,EAOEF,EAPFE,WACAC,EAMEH,EANFG,WACAC,EAKEJ,EALFI,SACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,aACAC,EACER,EADFQ,MAEIC,EAAaC,IAAUC,MAAM,IAC7BC,EAAiBF,IAAUC,MAAM,IAEjCE,EAAatB,EADHU,EAAQ,GAExB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWa,UAAU,SACnB,kBAAC,IAAD,KACGX,EADH,cACmBD,GADnB,OACgCa,YAAWT,IAD3C,OACmDD,IAEnD,kBAAC,IAAD,KACGJ,EAAQ,EADX,IACeX,EAAa0B,SAG9B,kBAAC,IAAD,KAAcZ,GACd,kBAAC,IAAD,KACE,kBAAC,IAAD,qBADF,OAEGG,QAFH,IAEGA,OAFH,EAEGA,EAAcR,KAAI,SAACkB,GAElB,IAAMC,EAAYT,EACfU,OAAO,EAAGF,EAAKD,QACfI,KAAK,IACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAeF,GACf,kBAAC,IAAD,YACGD,QADH,IACGA,OADH,EACGA,EAAMlB,KAAI,SAACsB,GACV,OACE,kBAAC,IAAD,CACEP,UACEO,EAAMC,UAAN,OAAiBT,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAaK,IAC1B,GACA,mBAUtB,kBAAC,IAAD,KACE,yBAAKJ,UAAU,SAAf,4BADF,OAEGP,QAFH,IAEGA,OAFH,EAEGA,EAAcR,KAAI,SAACkB,GAElB,IAAMC,EAAYN,EACfO,OAAO,EAAGF,EAAKD,QACfI,KAAK,IACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAeF,GACf,kBAAC,IAAD,YACGD,QADH,IACGA,OADH,EACGA,EAAMlB,KAAI,SAACsB,GAAD,OAAWA,EAAMC,eAKpC,6BAhBF,qBAkBE,6BACCd,SAOb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uBAAQhB,KAAK,UAAUE,QAAS,kBAAYT,EAAQU,IAAI,KAAxD","file":"4.6fba1b2c.chunk.js","sourcesContent":["import { letterStr } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { Button, Carousel, Icon } from 'antd-mobile';\r\nimport React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  ParsingFont,\r\n  ResolveBox,\r\n  ResolveItem,\r\n  ResolveLabel,\r\n  ResolveResultItem,\r\n  ResolveResultList,\r\n  ResolveTitle,\r\n} from '../../styles';\r\nimport dateToYear from '../../utils/dateToYear';\r\n\r\nconst Parsing: React.FC = () => {\r\n  const history = useHistory();\r\n  const { state } = useContext(ProviderContext);\r\n  const { examQuestion = [], examSelectAnswer = {} } = state;\r\n  return (\r\n    <Page>\r\n      <HeaderBox>\r\n        <Icon\r\n          type=\"cross\"\r\n          color=\"#262626\"\r\n          onClick={(): void => history.go(-4)}\r\n        />\r\n      </HeaderBox>\r\n      <CarouseBox>\r\n        <Carousel dots={false} style={{ height: '100%' }}>\r\n          {examQuestion?.map((qusItem, index) => {\r\n            const {\r\n              sourceType,\r\n              questionId,\r\n              question,\r\n              subject,\r\n              date,\r\n              checkAnswers,\r\n              parse,\r\n            } = qusItem;\r\n            const letterTemp = letterStr.split(''); // 遍历解答label\r\n            const letterTrueTemp = letterStr.split(''); // 遍历正确答案label\r\n            const prevNum = index + 1;\r\n            const prevSelect = examSelectAnswer[prevNum];\r\n            return (\r\n              <CarouselItem>\r\n                <HeaderBox className=\"lr-pd\">\r\n                  <GrayFont>\r\n                    {questionId} {`${sourceType}${dateToYear(date)}${subject}`}\r\n                  </GrayFont>\r\n                  <GrayFont>\r\n                    {index + 1}/{examQuestion.length}\r\n                  </GrayFont>\r\n                </HeaderBox>\r\n                <FontContent>{question}</FontContent>\r\n                <ResolveBox>\r\n                  <ResolveTitle>解答</ResolveTitle>\r\n                  {checkAnswers?.map((item) => {\r\n                    // 获取答案label\r\n                    const itemLabel = letterTemp\r\n                      .splice(0, item.length)\r\n                      .join('');\r\n                    return (\r\n                      <ResolveItem>\r\n                        <ResolveLabel>{itemLabel}</ResolveLabel>\r\n                        <ResolveResultList>\r\n                          {item?.map((item2) => {\r\n                            return (\r\n                              <ResolveResultItem\r\n                                className={\r\n                                  item2.answer === prevSelect?.[itemLabel]\r\n                                    ? ''\r\n                                    : 'error'\r\n                                }\r\n                              />\r\n                            );\r\n                          })}\r\n                        </ResolveResultList>\r\n                      </ResolveItem>\r\n                    );\r\n                  })}\r\n                </ResolveBox>\r\n                <ParsingFont>\r\n                  <div className=\"title\">正确答案</div>\r\n                  {checkAnswers?.map((item) => {\r\n                    // 获取答案label\r\n                    const itemLabel = letterTrueTemp\r\n                      .splice(0, item.length)\r\n                      .join('');\r\n                    return (\r\n                      <ResolveItem>\r\n                        <ResolveLabel>{itemLabel}</ResolveLabel>\r\n                        <ResolveResultList>\r\n                          {item?.map((item2) => item2.answer)}\r\n                        </ResolveResultList>\r\n                      </ResolveItem>\r\n                    );\r\n                  })}\r\n                  <br />\r\n                  解析：\r\n                  <br />\r\n                  {parse}\r\n                </ParsingFont>\r\n              </CarouselItem>\r\n            );\r\n          })}\r\n        </Carousel>\r\n      </CarouseBox>\r\n      <ButtonBox>\r\n        <ButtonBoxInner>\r\n          <Button type=\"primary\" onClick={(): void => history.go(-1)}>\r\n            返回报告\r\n          </Button>\r\n        </ButtonBoxInner>\r\n      </ButtonBox>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Parsing;\r\n"],"sourceRoot":""}