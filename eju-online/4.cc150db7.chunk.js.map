{"version":3,"sources":["pages/Library/Exam/Parsing/Parsing.tsx"],"names":["Parsing","history","useHistory","state","useContext","ProviderContext","examQuestion","examSelectAnswer","type","color","onClick","go","dots","style","height","map","qusItem","index","sourceType","questionId","question","subject","date","checkAnswers","parse","prevSelect","key","className","dateToYear","length","getMathpix","val","item","itemArr","split","item2","index2","isTrue","forEach","item3","answer","join"],"mappings":"yRAiJeA,EArHW,WACxB,IAAMC,EAAUC,cACRC,EAAUC,qBAAWC,KAArBF,MACR,EAAqDA,EAA7CG,oBAAR,MAAuB,GAAvB,IAAqDH,EAA1BI,wBAA3B,MAA8C,GAA9C,EACA,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,uBACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAYT,EAAQU,IAAI,QAIvC,kBAAC,IAAD,KACE,uBAAUC,MAAM,EAAOC,MAAO,CAAEC,OAAQ,SAAxC,OACGR,QADH,IACGA,OADH,EACGA,EAAcS,KAAI,SAACC,EAASC,GAC3B,IACEC,EAOEF,EAPFE,WACAC,EAMEH,EANFG,WACAC,EAKEJ,EALFI,SACAC,EAIEL,EAJFK,QACAC,EAGEN,EAHFM,KACAC,EAEEP,EAFFO,aACAC,EACER,EADFQ,MAKIC,EAAalB,EADHU,EAAQ,GAGxB,OACE,kBAAC,IAAD,CAAcS,IAAKP,GACjB,kBAAC,IAAD,CAAWQ,UAAU,SACnB,kBAAC,IAAD,KACGR,EADH,cACmBD,GADnB,OACgCU,YAAWN,IAD3C,OACmDD,IAEnD,kBAAC,IAAD,KACGJ,EAAQ,EADX,IACeX,EAAauB,SAG9B,kBAAC,IAAD,KAAcC,YAAWV,IACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,qBADF,OAEGG,QAFH,IAEGA,OAFH,EAEGA,EAAcR,KAAI,SAACgB,GAAS,IAAD,EAOpBC,EAAOD,EAAI,GACXE,EAAO,UAAGD,EAAKf,aAAR,aAAG,EAAYiB,MAAM,IAClC,OACE,kBAAC,IAAD,CAAaR,IAAKM,EAAKf,OACrB,kBAAC,IAAD,KAAee,EAAKf,OACpB,kBAAC,IAAD,YACGgB,QADH,IACGA,OADH,EACGA,EAASlB,KAAI,SAACoB,EAAOC,GAEpB,IAAIC,GAAS,EAMb,OALAN,EAAIO,SAAQ,SAACC,GAAW,IAAD,EACrBF,GACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAaO,EAAKf,cAAlB,eAA0BiB,MAAM,IAAIE,MACpCG,EAAMC,OAAON,MAAM,IAAIE,MAGzB,kBAAC,IAAD,CACET,UAAWU,EAAS,GAAK,mBASzC,kBAAC,IAAD,KACE,yBAAKV,UAAU,SAAf,4BADF,OAEGJ,QAFH,IAEGA,OAFH,EAEGA,EAAcR,KAAI,SAACgB,GAClB,IAAMC,EAAOD,EAAI,GAKjB,OACE,kBAAC,IAAD,CAAaL,IAAKM,EAAKf,OACrB,kBAAC,IAAD,KAAee,EAAKf,OACpB,kBAAC,IAAD,YACGc,QADH,IACGA,OADH,EACGA,EAAKhB,KAAI,SAACoB,GAAD,OAAWA,EAAMK,UAAQC,KAAK,eAKhD,6BAjBF,qBAmBE,6BACCX,YAAWN,UAOxB,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,uBAAQhB,KAAK,UAAUE,QAAS,kBAAYT,EAAQU,IAAI,KAAxD","file":"4.cc150db7.chunk.js","sourcesContent":["// import { letterStr } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { Button, Carousel, Icon } from 'antd-mobile';\r\nimport React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  ParsingFont,\r\n  ResolveBox,\r\n  ResolveItem,\r\n  ResolveLabel,\r\n  ResolveResultItem,\r\n  ResolveResultList,\r\n  ResolveTitle,\r\n  HeaderBlank,\r\n  HeaderInner,\r\n  ButtonBlank,\r\n} from '../../styles';\r\nimport dateToYear from '../../utils/dateToYear';\r\nimport getMathpix from '../../utils/getMathpix';\r\n\r\nconst Parsing: React.FC = () => {\r\n  const history = useHistory();\r\n  const { state } = useContext(ProviderContext);\r\n  const { examQuestion = [], examSelectAnswer = {} } = state;\r\n  return (\r\n    <Page>\r\n      <HeaderBox>\r\n        <HeaderBlank />\r\n        <HeaderInner>\r\n          <Icon\r\n            type=\"cross\"\r\n            color=\"#262626\"\r\n            onClick={(): void => history.go(-4)}\r\n          />\r\n        </HeaderInner>\r\n      </HeaderBox>\r\n      <CarouseBox>\r\n        <Carousel dots={false} style={{ height: '100%' }}>\r\n          {examQuestion?.map((qusItem, index) => {\r\n            const {\r\n              sourceType,\r\n              questionId,\r\n              question,\r\n              subject,\r\n              date,\r\n              checkAnswers,\r\n              parse,\r\n            } = qusItem;\r\n            // const letterTemp = letterStr.split(''); // 遍历解答label\r\n            // const letterTrueTemp = letterStr.split(''); // 遍历正确答案label\r\n            const prevNum = index + 1;\r\n            const prevSelect = examSelectAnswer[prevNum];\r\n            console.log('prevSelect++++++', prevSelect, prevNum);\r\n            return (\r\n              <CarouselItem key={questionId}>\r\n                <HeaderBox className=\"lr-pd\">\r\n                  <GrayFont>\r\n                    {questionId} {`${sourceType}${dateToYear(date)}${subject}`}\r\n                  </GrayFont>\r\n                  <GrayFont>\r\n                    {index + 1}/{examQuestion.length}\r\n                  </GrayFont>\r\n                </HeaderBox>\r\n                <FontContent>{getMathpix(question)}</FontContent>\r\n                <ResolveBox>\r\n                  <ResolveTitle>解答</ResolveTitle>\r\n                  {checkAnswers?.map((val) => {\r\n                    // 获取答案label\r\n                    // const itemLabel = letterTemp\r\n                    //   .splice(0, item.length)\r\n                    //   .join('');\r\n                    // item 中可能有多种答案，但是其中index是相同的\r\n                    // index的取值可以直接取第一个\r\n                    const item = val[0];\r\n                    const itemArr = item.index?.split('');\r\n                    return (\r\n                      <ResolveItem key={item.index}>\r\n                        <ResolveLabel>{item.index}</ResolveLabel>\r\n                        <ResolveResultList>\r\n                          {itemArr?.map((item2, index2) => {\r\n                            // itemArr遍历为了确定判断第几个选项答案是否正确\r\n                            let isTrue = false;\r\n                            val.forEach((item3) => {\r\n                              isTrue =\r\n                                prevSelect?.[item.index]?.split('')[index2] ===\r\n                                item3.answer.split('')[index2];\r\n                            });\r\n                            return (\r\n                              <ResolveResultItem\r\n                                className={isTrue ? '' : 'error'}\r\n                              />\r\n                            );\r\n                          })}\r\n                        </ResolveResultList>\r\n                      </ResolveItem>\r\n                    );\r\n                  })}\r\n                </ResolveBox>\r\n                <ParsingFont>\r\n                  <div className=\"title\">正确答案</div>\r\n                  {checkAnswers?.map((val) => {\r\n                    const item = val[0];\r\n                    // 获取答案label\r\n                    // const itemLabel = letterTrueTemp\r\n                    //   .splice(0, item.length)\r\n                    //   .join('');\r\n                    return (\r\n                      <ResolveItem key={item.index}>\r\n                        <ResolveLabel>{item.index}</ResolveLabel>\r\n                        <ResolveResultList>\r\n                          {val?.map((item2) => item2.answer).join('、')}\r\n                        </ResolveResultList>\r\n                      </ResolveItem>\r\n                    );\r\n                  })}\r\n                  <br />\r\n                  解析：\r\n                  <br />\r\n                  {getMathpix(parse)}\r\n                </ParsingFont>\r\n              </CarouselItem>\r\n            );\r\n          })}\r\n        </Carousel>\r\n      </CarouseBox>\r\n      <ButtonBox>\r\n        <ButtonBlank />\r\n        <ButtonBoxInner>\r\n          <Button type=\"primary\" onClick={(): void => history.go(-1)}>\r\n            返回报告\r\n          </Button>\r\n        </ButtonBoxInner>\r\n      </ButtonBox>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Parsing;\r\n"],"sourceRoot":""}