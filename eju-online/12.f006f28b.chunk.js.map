{"version":3,"sources":["pages/Library/Topic/Topic.tsx"],"names":["Topic","openModal","answerSheet","useState","answerMap","setAnswerMap","showResult","setShowResult","isShowResult","setIsShowResult","dispatch","useContext","ProviderContext","getUrlParams","subject","tagId","tag","swiperRef","useRef","swiperPageRef","useQuery","TOPIC_QUESTION","variables","data","loading","topicQuestions","cutDownRef","history","useHistory","useEffect","type","topic","hide","length","id","color","onClick","go","CutDown","ref","defaultIndex","loop","indicator","total","current","onIndexChange","document","getElementById","scrollTo","setTimeout","map","topicItem","index","questionId","question","checkAnswers","_id","preAnswer","Item","key","className","getMathpix","val","item","label","changeAnswer","value","questionNum","cuttent","handleEditor","topicSelectAnswer","swipeNext","Layer","effect","needCloseTag","visible","selectAnswer","getTimeCounter","stop"],"mappings":"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","file":"12.f006f28b.chunk.js","sourcesContent":["import { Icon, Button, Toast } from 'antd-mobile';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { Swiper } from 'antd-mobile-v5';\r\nimport { SwiperRef } from 'antd-mobile-v5/es/components/swiper';\r\nimport { TOPIC_QUESTION } from '@/helpers/APIHelper';\r\nimport getUrlParams from '@/utils/get-url-params';\r\nimport { ExamQuestionItem } from '@/reducer/reducer';\r\n// import { letterStr } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { LayerContainer } from '@/components/Layer';\r\nimport answerSheet from './answerSheet';\r\nimport { ResultSheet } from './resultSheet';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  CardBox,\r\n  CardItem,\r\n  EditorFont,\r\n  EditorIcon,\r\n  ButtonBlank,\r\n  HeaderInner,\r\n  HeaderBlank,\r\n} from '../styles';\r\nimport getMathpix from '../utils/getMathpix';\r\nimport CutDown from '../components/CutDown';\r\n\r\nconst Topic: React.FC = () => {\r\n  const { openModal } = answerSheet();\r\n  const [answerMap, setAnswerMap] = useState({});\r\n  const [showResult, setShowResult] = useState(false); // 展示答题卡结果\r\n  const [isShowResult, setIsShowResult] = useState(false); // 是否展示查看结果按钮\r\n  const { dispatch } = useContext(ProviderContext);\r\n  const { subject, tagId, tag } = getUrlParams();\r\n  const swiperRef = useRef<SwiperRef>(null);\r\n  const swiperPageRef = useRef(1); // 默认在第一页\r\n\r\n  const { data, loading } = useQuery(TOPIC_QUESTION, {\r\n    variables: { subject, tagId },\r\n  });\r\n  const { topicQuestions } = data || {};\r\n  const cutDownRef = useRef<{ stop: () => number }>();\r\n\r\n  const history = useHistory();\r\n\r\n  // 回显选中的答案\r\n  const handleEditor = (\r\n    type: string,\r\n    value: string,\r\n    questionNum: number\r\n  ): void => {\r\n    const preAnswer: { [key: string]: string } =\r\n      answerMap[questionNum as keyof typeof answerMap] || {};\r\n    preAnswer[type] = value;\r\n\r\n    setAnswerMap((cuttent) => {\r\n      return {\r\n        ...cuttent,\r\n        [questionNum]: preAnswer,\r\n      };\r\n    });\r\n  };\r\n  // 提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({ type: 'setTopicSelectAnswer', topicSelectAnswer: answerMap });\r\n\r\n    setShowResult(true);\r\n  };\r\n\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    swiperRef.current?.swipeNext();\r\n  };\r\n\r\n  // 缓存在state中正确答案\r\n  useEffect(() => {\r\n    console.log('useEffect++++', topicQuestions);\r\n    dispatch?.({\r\n      type: 'setTopic',\r\n      topic: topicQuestions,\r\n    });\r\n  }, [dispatch, topicQuestions]);\r\n  // 加载loading\r\n  useEffect(() => {\r\n    loading ? Toast.loading('加载中', 0) : Toast.hide();\r\n  }, [loading]);\r\n  // 轮播图切换\r\n  const indicatorChange = (total: number, current: number): null => {\r\n    swiperPageRef.current = current + 1;\r\n    return null;\r\n  };\r\n\r\n  // 监听跑马灯变化\r\n  const handleOnIndexChange = (): void => {\r\n    document.getElementById('topic_page')?.scrollTo(0, 0);\r\n    console.log(swiperPageRef.current);\r\n    setTimeout(() => {\r\n      if (topicQuestions.length === swiperPageRef.current) {\r\n        setIsShowResult(true);\r\n      } else {\r\n        setIsShowResult(false);\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 只有一道题时候展示产看结果按钮\r\n    topicQuestions?.length === 1 && setIsShowResult(true);\r\n  }, [topicQuestions?.length]);\r\n  return (\r\n    <>\r\n      {topicQuestions && topicQuestions.length > 0 && (\r\n        <Page id=\"topic_page\">\r\n          <HeaderBox>\r\n            <HeaderBlank />\r\n            <HeaderInner>\r\n              <Icon\r\n                type=\"cross\"\r\n                color=\"#262626\"\r\n                onClick={(): void => history.go(-1)}\r\n              />\r\n              <CutDown ref={cutDownRef} />\r\n            </HeaderInner>\r\n          </HeaderBox>\r\n          <CarouseBox>\r\n            <Swiper\r\n              defaultIndex={0}\r\n              loop={false}\r\n              indicator={indicatorChange}\r\n              ref={swiperRef}\r\n              onIndexChange={handleOnIndexChange}\r\n            >\r\n              {topicQuestions?.map(\r\n                (topicItem: ExamQuestionItem, index: number) => {\r\n                  const { questionId, question, checkAnswers, _id } = topicItem;\r\n                  // const letterTemp = letterStr.split('');\r\n                  const prevNum = index + 1;\r\n                  const preAnswer =\r\n                    answerMap[prevNum as keyof typeof answerMap] || {};\r\n                  return (\r\n                    <Swiper.Item key={_id}>\r\n                      <HeaderBox className=\"lr-pd\">\r\n                        <GrayFont>\r\n                          {questionId} {tag}\r\n                        </GrayFont>\r\n                        <GrayFont>\r\n                          {index + 1}/{topicQuestions?.length}\r\n                        </GrayFont>\r\n                      </HeaderBox>\r\n                      <FontContent>{getMathpix(question)}</FontContent>\r\n                      <CardBox>\r\n                        <CardItem>解答</CardItem>\r\n                        {checkAnswers.map((val) => {\r\n                          // 获取答案label\r\n                          // const itemLabel = letterTemp\r\n                          //   .splice(0, item.length)\r\n                          //   .join('');\r\n                          const item = val[0];\r\n                          return (\r\n                            <CardItem key={item.index}>\r\n                              <span>{item.index}</span>\r\n                              <EditorFont>\r\n                                <span>\r\n                                  {\r\n                                    preAnswer[\r\n                                      item.index as keyof typeof preAnswer\r\n                                    ]\r\n                                  }\r\n                                </span>\r\n                                <EditorIcon\r\n                                  className=\"iconfont icon-edit\"\r\n                                  onClick={(): void =>\r\n                                    openModal({\r\n                                      label: item.index,\r\n                                      changeAnswer: (value) =>\r\n                                        handleEditor(\r\n                                          item.index,\r\n                                          value,\r\n                                          index + 1\r\n                                        ),\r\n                                    })\r\n                                  }\r\n                                />\r\n                              </EditorFont>\r\n                            </CardItem>\r\n                          );\r\n                        })}\r\n                      </CardBox>\r\n                    </Swiper.Item>\r\n                  );\r\n                }\r\n              )}\r\n            </Swiper>\r\n          </CarouseBox>\r\n          <ButtonBox>\r\n            <ButtonBlank />\r\n            <ButtonBoxInner>\r\n              {isShowResult ? (\r\n                <Button type=\"primary\" onClick={handleSubmit}>\r\n                  提交并查看结果\r\n                </Button>\r\n              ) : (\r\n                <Button type=\"primary\" onClick={handleQuestionChange}>\r\n                  下一题\r\n                </Button>\r\n              )}\r\n            </ButtonBoxInner>\r\n          </ButtonBox>\r\n        </Page>\r\n      )}\r\n      <LayerContainer effect=\"bottom\" needCloseTag visible={showResult}>\r\n        <ResultSheet\r\n          hide={(): void => setShowResult(false)}\r\n          type=\"topic\"\r\n          selectAnswer={answerMap}\r\n          tag={tag}\r\n          getTimeCounter={(): number => cutDownRef.current?.stop() || 0}\r\n        />\r\n      </LayerContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Topic;\r\n"],"sourceRoot":""}