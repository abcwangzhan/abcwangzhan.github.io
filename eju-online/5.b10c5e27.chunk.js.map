{"version":3,"sources":["pages/Library/Exam/Result/Result.tsx"],"names":["Result","history","useHistory","useContext","ProviderContext","state","examInfo","exam","examQuestion","examSelectAnswer","sourceType","date","subject","point","forEach","questionItem","questionItemidx","checkAnswers","letterTemp","letterStr","split","answerItem","answerLabel","splice","length","join","selectQuestion","selectAnswer","preAnswerItem","preAnswerItemIdx","selectAnswerArr","answer","getExamPoint","dateToYear","type","inline","onClick","push","go"],"mappings":"6NAwFeA,EAvEU,WACvB,IAAMC,EAAUC,cAEhB,EADkBC,qBAAWC,KAArBC,OAKK,GAHLC,EADR,EACEC,KADF,IAEEC,oBAFF,MAEiB,GAFjB,MAGEC,wBAHF,MAGqB,GAHrB,EAMA,GADiBH,GAAY,IAArBC,MACsC,GAAtCG,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QA6B1B,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAcF,EAAd,4BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,qBACA,kBAAC,IAAD,KAhCa,WACnB,IAAIG,EAAQ,EAuBZ,OAtBAL,EAAaM,SAAQ,SAACC,EAAcC,GAElC,IAAQC,EAAiBF,EAAjBE,aACFC,EAAaC,IAAUC,MAAM,IACnCH,EAAaH,SAAQ,SAACO,GAGpB,IAAMC,EAAcJ,EAAWK,OAAO,EAAGF,EAAWG,QAAQC,KAAK,IAC3DC,EACJjB,EACGO,EAAkB,GAEjBW,EAAY,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAiBJ,GACtCD,EAAWP,SAAQ,SAACc,EAAeC,GAEjC,IAAMC,EAAe,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcP,MAAM,KACzB,OAAfU,QAAe,IAAfA,OAAA,EAAAA,EAAkBD,MAAsBD,EAAcG,SACxDlB,GAASe,EAAcf,gBAKxBA,EAQamB,KAEhB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGC,YAAWtB,GACXC,EAFH,UAIA,kBAAC,IAAD,kCAIJ,kBAAC,IAAD,KACE,uBACEsB,KAAK,UACLC,QAAM,EACNC,QAAS,kBAAYnC,EAAQoC,KAAK,mBAHpC,4BAOA,uBAAQH,KAAK,UAAUC,QAAM,EAACC,QAAS,kBAAYnC,EAAQqC,IAAI,KAA/D","file":"5.b10c5e27.chunk.js","sourcesContent":["import { letterStr } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { Button } from 'antd-mobile';\r\nimport React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n  ResultBg,\r\n  ResultButtonBox,\r\n  ResultTitle,\r\n  TrueBox,\r\n  TrueDesc,\r\n  TrueDescItem,\r\n  TruePercent,\r\n  TrueTitle,\r\n} from '../../styles';\r\nimport dateToYear from '../../utils/dateToYear';\r\n\r\nconst Result: React.FC = () => {\r\n  const history = useHistory();\r\n  const { state } = useContext(ProviderContext);\r\n  const {\r\n    exam: examInfo,\r\n    examQuestion = [],\r\n    examSelectAnswer = {},\r\n  } = state || {};\r\n  const { exam } = examInfo || {};\r\n  const { sourceType, date, subject } = exam || {}; // 考试信息\r\n\r\n  // 获取获得得分数\r\n  const getExamPoint = (): number => {\r\n    let point = 0;\r\n    examQuestion.forEach((questionItem, questionItemidx) => {\r\n      // 遍历有几道题\r\n      const { checkAnswers } = questionItem;\r\n      const letterTemp = letterStr.split('');\r\n      checkAnswers.forEach((answerItem) => {\r\n        // 遍历有几个答案项\r\n        // 获得当前答案得label\r\n        const answerLabel = letterTemp.splice(0, answerItem.length).join('');\r\n        const selectQuestion =\r\n          examSelectAnswer[\r\n            (questionItemidx + 1) as keyof typeof examSelectAnswer\r\n          ]; // 获得选择得第几题\r\n        const selectAnswer = selectQuestion?.[answerLabel]; // 获得对应选择得答案\r\n        answerItem.forEach((preAnswerItem, preAnswerItemIdx) => {\r\n          // 遍历每个答案项有并列几个答案\r\n          const selectAnswerArr = selectAnswer?.split(''); // 获取选择答案得数组\r\n          if (selectAnswerArr?.[preAnswerItemIdx] === preAnswerItem.answer) {\r\n            point += preAnswerItem.point;\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return point;\r\n  };\r\n  return (\r\n    <>\r\n      <ResultBg>\r\n        <ResultTitle>{sourceType}模拟报告</ResultTitle>\r\n        <TrueBox>\r\n          <TrueTitle>分数</TrueTitle>\r\n          <TruePercent>{getExamPoint()}</TruePercent>\r\n        </TrueBox>\r\n        <TrueDesc>\r\n          <TrueDescItem>\r\n            {dateToYear(date)}\r\n            {subject}卷\r\n          </TrueDescItem>\r\n          <TrueDescItem>用时 08：18</TrueDescItem>\r\n        </TrueDesc>\r\n      </ResultBg>\r\n\r\n      <ResultButtonBox>\r\n        <Button\r\n          type=\"primary\"\r\n          inline\r\n          onClick={(): void => history.push('/exam-parsing')}\r\n        >\r\n          查看解析\r\n        </Button>\r\n        <Button type=\"primary\" inline onClick={(): void => history.go(-3)}>\r\n          继续练习\r\n        </Button>\r\n      </ResultButtonBox>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n"],"sourceRoot":""}