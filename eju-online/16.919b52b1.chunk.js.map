{"version":3,"sources":["pages/Login/Register/Register.tsx"],"names":["AgreeItem","Register","useState","formValues","setFormValues","checked","setChecked","useMutation","USER_RIGISTER","onCompleted","loginRes","registerSuccess","onError","show","registerReq","history","useHistory","data","storage","setLocal","StorageKey","TOKEN","signUp","token","info","goBack","handleChange","value","type","vals","placeholder","name","onChange","val","size","onClick","email","password","userName","surePassword","emailReg","test","userNameReg","pwdReg","checkValues","variables","md5","toString","data-seed","e","check","target","handleAgreeCheck","preventDefault"],"mappings":"mXAaQA,EAAR,IAAQA,UAwIOC,EAtIY,WACzB,MAAoCC,mBAA6B,IAAjE,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBC,YAAYC,IAAe,CAC/CC,YAAa,SAACC,GAAD,OAAcC,EAAgBD,IAC3CE,QAAS,kBAAM,IAAMC,KAAK,+BAFrBC,EAAP,oBAIMC,EAAUC,cAEVL,EAAkB,SAACM,GAA+C,IAAD,EACrEC,IAAQC,SAASC,IAAWC,OAAW,OAAJJ,QAAI,IAAJA,GAAA,UAAAA,EAAMK,cAAN,eAAcC,QAAS,IAC1D,IAAMC,KAAK,2BAAQ,GAAG,kBAAMT,EAAQU,aAuDhCC,EAAe,SAACC,EAAeC,GACnCxB,GAAc,SAACyB,GAAD,mBAAC,eAAeA,GAAhB,kBAAuBD,EAAOD,QAQ9C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,uCACA,uBACEG,YAAY,iCACZC,KAAK,QACLC,SAAU,SAACC,GAAD,OAAeP,EAAaO,EAAK,YAE7C,uBAAYC,KAAK,OACjB,uBACEJ,YAAY,mDACZC,KAAK,WACLC,SAAU,SAACC,GAAD,OAAeP,EAAaO,EAAK,eAE7C,uBAAYC,KAAK,OACjB,uBACEJ,YAAY,iCACZF,KAAK,WACLG,KAAK,WACLC,SAAU,SAACC,GAAD,OAAeP,EAAaO,EAAK,eAE7C,uBAAYC,KAAK,OACjB,uBACEJ,YAAY,6CACZF,KAAK,WACLG,KAAK,eACLC,SAAU,SAACC,GAAD,OAAeP,EAAaO,EAAK,mBAE7C,uBAAYC,KAAK,OACjB,kBAAC,IAAD,CAAeN,KAAK,UAAUO,QApDX,WACrB,GAtCkB,WAClB,IAAQC,EAA4CjC,EAA5CiC,MAAOC,EAAqClC,EAArCkC,SAAUC,EAA2BnC,EAA3BmC,SAAUC,EAAiBpC,EAAjBoC,aACnC,QAAQ,GACN,MAAOH,EACL,IAAMZ,KAAK,8CACX,MACF,KAAKgB,IAASC,KAAKL,GAAS,IAC1B,IAAMZ,KAAK,4EACX,MACF,MAAOc,EACL,IAAMd,KAAK,oDACX,MACF,KAAKkB,IAAYD,KAAKH,GAAY,IAChC,IAAMd,KAAK,sFACX,MACF,MAAOa,EACL,IAAMb,KAAK,8CACX,MACF,KAAKmB,IAAOF,KAAKJ,GAAY,IAC3B,IAAMb,KAAK,sIACX,MACF,MAAOe,EACL,IAAMf,KAAK,8CACX,MACF,KAAKe,IAAiBF,EAEpB,IAAMb,KAAK,oDACX,MACF,KAAKnB,EACH,IAAMmB,KAAK,kCACX,MACF,QACE,OAAO,EAEX,OAAO,EAIHoB,GAAe,CACjB,IAAQR,EAA8BjC,EAA9BiC,MAAOC,EAAuBlC,EAAvBkC,SAAUC,EAAanC,EAAbmC,SAEzBxB,EAAY,CACV+B,UAAW,CACTT,QACAC,SAAUS,IAAIT,GAAY,IAAIU,WAC9BT,iBA4CJ,gBAGA,kBAACtC,EAAD,CACEgD,YAAU,QACVhB,SAAU,SAACiB,GAAD,OAtCS,SAACA,GAA6B,IAAD,EAC9CC,EAAK,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAGE,cAAN,aAAG,EAAW9C,QACzBC,EAAW4C,GAoCgCE,CAAiBH,KAF1D,qBAKE,kBAAC,IAAD,CACEd,QAAS,SAACc,GACRA,EAAEI,mBAFN,oDALF,IAcE,kBAAC,IAAD,CACElB,QAAS,SAACc,GACRA,EAAEI,mBAFN","file":"16.919b52b1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { WhiteSpace, InputItem, Checkbox, Toast } from 'antd-mobile';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport { USER_RIGISTER } from '@/helpers/APIHelper';\r\nimport md5 from 'crypto-js/md5';\r\nimport storage from '@/utils/storage';\r\nimport StorageKey from '@/constants/StorageKey';\r\nimport { OnChangeParams } from 'antd-mobile/lib/checkbox/PropsType';\r\nimport { Page, PageTitle, PrimaryButton, OthersItem } from '../styles';\r\nimport { RegisterFormValues } from '../types';\r\nimport { userNameReg, emailReg, pwdReg } from '../regs';\r\n\r\nconst { AgreeItem } = Checkbox;\r\n\r\nconst Register: React.FC = () => {\r\n  const [formValues, setFormValues] = useState<RegisterFormValues>({}); // 表单值\r\n  const [checked, setChecked] = useState(false);\r\n  const [registerReq] = useMutation(USER_RIGISTER, {\r\n    onCompleted: (loginRes) => registerSuccess(loginRes),\r\n    onError: () => Toast.show('注册失败'),\r\n  });\r\n  const history = useHistory();\r\n  // 登录成功后操作\r\n  const registerSuccess = (data: { signUp: { token: string } }): void => {\r\n    storage.setLocal(StorageKey.TOKEN, data?.signUp?.token || '');\r\n    Toast.info('注册成功', 2, () => history.goBack());\r\n  };\r\n\r\n  // 表单校验\r\n  const checkValues = (): boolean => {\r\n    const { email, password, userName, surePassword } = formValues;\r\n    switch (false) {\r\n      case !!email:\r\n        Toast.info('请输入电子邮箱');\r\n        break;\r\n      case emailReg.test(email || ''):\r\n        Toast.info('请输入正确的电子邮箱格式');\r\n        break;\r\n      case !!userName:\r\n        Toast.info('请输入注册账号名');\r\n        break;\r\n      case userNameReg.test(userName || ''):\r\n        Toast.info('请输入由数字字母组成8-24位账号');\r\n        break;\r\n      case !!password:\r\n        Toast.info('请输入账号密码');\r\n        break;\r\n      case pwdReg.test(password || ''):\r\n        Toast.info('请输入8-24位包含大小写字母数字及特殊字符的密码');\r\n        break;\r\n      case !!surePassword:\r\n        Toast.info('请输入确认密码');\r\n        break;\r\n      case surePassword === password:\r\n        console.log(surePassword, password, surePassword !== password);\r\n        Toast.info('请与密码保持一致');\r\n        break;\r\n      case checked:\r\n        Toast.info('请勾选协议');\r\n        break;\r\n      default:\r\n        return true;\r\n    }\r\n    return false;\r\n  };\r\n  // 提交注册\r\n  const handleRegister = (): void => {\r\n    if (checkValues()) {\r\n      const { email, password, userName } = formValues;\r\n      console.log({ variables: { email, password } });\r\n      registerReq({\r\n        variables: {\r\n          email,\r\n          password: md5(password || '').toString(),\r\n          userName,\r\n        },\r\n      });\r\n    }\r\n  };\r\n  // 表单值改变\r\n  const handleChange = (value: string, type: string): void => {\r\n    setFormValues((vals) => ({ ...vals, [type]: value }));\r\n  };\r\n\r\n  // 单选按钮选中状态\r\n  const handleAgreeCheck = (e: OnChangeParams): void => {\r\n    const check = e?.target?.checked;\r\n    setChecked(check);\r\n  };\r\n  return (\r\n    <Page>\r\n      <PageTitle>新用户注册</PageTitle>\r\n      <InputItem\r\n        placeholder=\"请输入邮箱\"\r\n        name=\"email\"\r\n        onChange={(val): void => handleChange(val, 'email')}\r\n      />\r\n      <WhiteSpace size=\"lg\" />\r\n      <InputItem\r\n        placeholder=\"请输入注册账号名\"\r\n        name=\"userName\"\r\n        onChange={(val): void => handleChange(val, 'userName')}\r\n      />\r\n      <WhiteSpace size=\"lg\" />\r\n      <InputItem\r\n        placeholder=\"请输入密码\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        onChange={(val): void => handleChange(val, 'password')}\r\n      />\r\n      <WhiteSpace size=\"lg\" />\r\n      <InputItem\r\n        placeholder=\"请输入确认密码\"\r\n        type=\"password\"\r\n        name=\"surePassword\"\r\n        onChange={(val): void => handleChange(val, 'surePassword')}\r\n      />\r\n      <WhiteSpace size=\"lg\" />\r\n      <PrimaryButton type=\"primary\" onClick={handleRegister}>\r\n        注册\r\n      </PrimaryButton>\r\n      <AgreeItem\r\n        data-seed=\"logId\"\r\n        onChange={(e: OnChangeParams): void => handleAgreeCheck(e)}\r\n      >\r\n        我同意\r\n        <OthersItem\r\n          onClick={(e): void => {\r\n            e.preventDefault();\r\n            // alert('agree 用户服务协议');\r\n          }}\r\n        >\r\n          《用户服务协议》\r\n        </OthersItem>\r\n        ,\r\n        <OthersItem\r\n          onClick={(e): void => {\r\n            e.preventDefault();\r\n            // alert('agree 隐私政策');\r\n          }}\r\n        >\r\n          《隐私政策》\r\n        </OthersItem>\r\n      </AgreeItem>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}