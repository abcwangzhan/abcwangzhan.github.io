{"version":3,"sources":["pages/Library/Quick/AnswerModal.tsx","pages/Library/Quick/Quick.tsx"],"names":["Answer","props","useMutation","SUBMIT_ANSWER","onCompleted","res","handleSubmitSuccess","submitAnswer","loading","state","useContext","ProviderContext","hide","tag","answerNum","answer","timeCounter","history","replace","useEffect","type","onClick","answerItemArr","i","push","className","key","getAnswer","quick","quickTrueAnswer","ids","userAnswers","pointsArr","trueNum","_id","answerValue","prevTrueItem","point","getUrlParams","subject","tagId","sourceType","variables","points","accuracy","moduleType","Quick","useState","aswArr","setAswArr","selectIndex","setSelectIndex","useLazyQuery","QUICK_QUESTION","getQuestion","data","answerShow","setAnswerShow","dispatch","smartQuestions","useHistory","questionLen","length","handleQuestionChange","current","trueAnswer","forEach","item","checkAnswer","document","getElementById","scrollTo","id","color","go","dots","style","height","afterChange","setTimeout","selectedIndex","map","index","question","questionId","options","getMathpix","optionItem","idx","questionNum","numToLetter","selectAnswer","Layer","effect","needCloseTag","visible"],"mappings":"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","file":"9.1525b12e.chunk.js","sourcesContent":["import React, { ReactElement, useContext, useEffect } from 'react';\r\nimport { Button, Icon, Toast } from 'antd-mobile';\r\nimport history from '@/utils/history';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { SUBMIT_ANSWER } from '@/helpers/APIHelper';\r\nimport getUrlParams from '@/utils/get-url-params';\r\nimport {\r\n  AnswerInner,\r\n  AnswerLabel,\r\n  AnswerList,\r\n  AnswerListBox,\r\n  AnswerListItem,\r\n  AnswerModal,\r\n  AnswerTitle,\r\n  CloseBox,\r\n} from './styles';\r\nimport { ButtonBox } from '../styles';\r\n\r\ninterface AnserProps {\r\n  hide: () => void;\r\n  answer: { [key: number]: string };\r\n  tag: string;\r\n  answerNum: number;\r\n  timeCounter: number;\r\n}\r\nconst Answer: React.FC<AnserProps> = (props): ReactElement => {\r\n  const [submitAnswer, { loading }] = useMutation(SUBMIT_ANSWER, {\r\n    onCompleted: (res) => handleSubmitSuccess(res),\r\n  });\r\n  const { state } = useContext(ProviderContext);\r\n\r\n  const { hide, tag, answerNum, answer, timeCounter } = props;\r\n  console.log('state++++++++', state);\r\n\r\n  // 获取已答答案\r\n  const getAnswer = (): ReactElement[] => {\r\n    const answerItemArr = [];\r\n    for (let i = 0; i < answerNum; i += 1) {\r\n      if (answer[i as keyof typeof answer]) {\r\n        answerItemArr.push(\r\n          <AnswerListItem className=\"true\" key={i + 1}>\r\n            {i + 1}\r\n          </AnswerListItem>\r\n        );\r\n      } else {\r\n        answerItemArr.push(\r\n          <AnswerListItem key={i + 1}>{i + 1}</AnswerListItem>\r\n        );\r\n      }\r\n    }\r\n    return answerItemArr;\r\n  };\r\n\r\n  // 提交答题卡\r\n  const handleSubmit = (): void => {\r\n    const { quick, quickTrueAnswer } = state;\r\n    const ids = [];\r\n    const userAnswers = [];\r\n    // let abilityValue = 0;\r\n    const pointsArr = [];\r\n    let trueNum = 0;\r\n    for (let i = 0; i < answerNum; i += 1) {\r\n      ids.push(quick?.[i]?._id || '');\r\n      const answerValue = answer[i as keyof typeof answer];\r\n      userAnswers.push([answerValue || '']);\r\n      const prevTrueItem = quickTrueAnswer?.[i];\r\n      if (prevTrueItem?.answer === answerValue) {\r\n        // abilityValue += prevTrueItem?.point;\r\n        trueNum += 1;\r\n        pointsArr.push(prevTrueItem?.point);\r\n      } else {\r\n        pointsArr.push(0);\r\n      }\r\n    }\r\n    const { subject, tagId, sourceType } = getUrlParams();\r\n\r\n    const param = {\r\n      ids,\r\n      userAnswers,\r\n      points: pointsArr,\r\n      accuracy: trueNum / answerNum,\r\n      timeCounter,\r\n      subject,\r\n      tagId,\r\n      sourceType,\r\n      moduleType: '0',\r\n    };\r\n    console.log('param++++++++++++++', param);\r\n    submitAnswer({ variables: param });\r\n  };\r\n  // 提交成功回调\r\n  const handleSubmitSuccess = (res: {\r\n    success: boolean;\r\n    message?: string;\r\n  }): void => {\r\n    console.log('handleSubmitSuccess++++', res);\r\n    hide();\r\n    history.replace(`/quick-result?tag=${tag}`);\r\n  };\r\n  useEffect(() => {\r\n    loading ? Toast.loading('提交中', 0) : Toast.hide();\r\n  }, [loading]);\r\n  return (\r\n    <AnswerModal>\r\n      <AnswerInner>\r\n        <AnswerTitle>\r\n          答题卡\r\n          <CloseBox>\r\n            <Icon type=\"cross\" onClick={(): void => hide()} />\r\n          </CloseBox>\r\n        </AnswerTitle>\r\n        <AnswerListBox>\r\n          <AnswerLabel>{tag}</AnswerLabel>\r\n          <AnswerList>{getAnswer()}</AnswerList>\r\n        </AnswerListBox>\r\n        <ButtonBox>\r\n          <Button type=\"primary\" onClick={handleSubmit}>\r\n            确定提交\r\n          </Button>\r\n        </ButtonBox>\r\n      </AnswerInner>\r\n    </AnswerModal>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import { Icon, Carousel, Button, Toast } from 'antd-mobile';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUICK_QUESTION } from '@/helpers/APIHelper';\r\nimport getUrlParams from '@/utils/get-url-params';\r\nimport { LayerContainer } from '@/components/Layer';\r\nimport { numToLetter } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { TrueAnswer } from '@/reducer/reducer';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  HeaderBlank,\r\n  HeaderInner,\r\n  ButtonBlank,\r\n} from '../styles';\r\nimport { AnswerBox, AnswerItem } from './styles';\r\nimport Answer from './AnswerModal';\r\nimport getMathpix from '../utils/getMathpix';\r\n\r\nconst Quick: React.FC = () => {\r\n  const [aswArr, setAswArr] = useState({}); // 选择的答案集合\r\n  const [selectIndex, setSelectIndex] = useState(0); // 选择题目项\r\n  const [getQuestion, { data, loading }] = useLazyQuery(QUICK_QUESTION); // 获取题目列表\r\n  const [answerShow, setAnswerShow] = useState(false); // 是否展示答案弹窗\r\n  const { dispatch } = useContext(ProviderContext);\r\n\r\n  const { smartQuestions } = data || {};\r\n  const history = useHistory();\r\n  const { subject, tagId, tag } = getUrlParams();\r\n  const questionLen = smartQuestions?.length || 0; // 题目数\r\n  console.log(data);\r\n  // 选择答案\r\n  const handleSelectAnswer = (questionNum: number, answerNum: number): void => {\r\n    setAswArr((item) => {\r\n      return {\r\n        ...item,\r\n        [questionNum]: numToLetter[answerNum as keyof typeof numToLetter], // 转换成ABCD\r\n      };\r\n    });\r\n    setTimeout(() => {\r\n      selectIndex + 1 < questionLen && handleQuestionChange(); // 选择答案后自动切换题目\r\n    }, 300);\r\n  };\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    setSelectIndex((current) => current + 1);\r\n  };\r\n  // 点击提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({\r\n      type: 'setSelectAnswer',\r\n      selectAnswer: aswArr,\r\n    });\r\n    // Layer.open({\r\n    //   effect: 'bottom',\r\n    //   needCloseTag: true,\r\n    //   content: (\r\n    //     <Answer\r\n    //       hide={Layer.hide}\r\n    //       answer={aswArr}\r\n    //       tag={tag}\r\n    //       answerNum={questionLen}\r\n    //     />\r\n    //   ),\r\n    // });\r\n    setAnswerShow(true);\r\n  };\r\n  // 查询题目列表\r\n  useEffect(() => {\r\n    getQuestion({\r\n      variables: { subject, tagId },\r\n    });\r\n  }, [getQuestion, subject, tagId]);\r\n\r\n  // 缓存在state中正确答案\r\n  useEffect(() => {\r\n    const trueAnswer: TrueAnswer[] = [];\r\n    smartQuestions?.forEach((item: { checkAnswer: TrueAnswer }) =>\r\n      trueAnswer.push(item.checkAnswer)\r\n    );\r\n    dispatch?.({\r\n      type: 'setQuickTrueAnswer',\r\n      quickTrueAnswer: trueAnswer,\r\n    });\r\n    dispatch?.({\r\n      type: 'setQuick',\r\n      quick: smartQuestions,\r\n    });\r\n  }, [dispatch, smartQuestions]);\r\n  // 页面loading\r\n  useEffect(() => {\r\n    loading ? Toast.loading('加载中', 0) : Toast.hide();\r\n  }, [loading]);\r\n\r\n  // 切换题目时回滚到最顶端\r\n  useEffect(() => {\r\n    document.getElementById('quick_page')?.scrollTo(0, 0);\r\n  }, [selectIndex]);\r\n  return (\r\n    <>\r\n      {questionLen > 0 && (\r\n        <Page id=\"quick_page\">\r\n          <HeaderBox>\r\n            <HeaderBlank />\r\n            <HeaderInner>\r\n              <Icon\r\n                type=\"cross\"\r\n                color=\"#262626\"\r\n                onClick={(): void => history.go(-1)}\r\n              />\r\n              <GrayFont>00:18</GrayFont>\r\n            </HeaderInner>\r\n          </HeaderBox>\r\n          <CarouseBox>\r\n            <Carousel\r\n              dots={false}\r\n              style={{ height: '100%' }}\r\n              afterChange={(current: number): void => {\r\n                setTimeout(() => {\r\n                  setSelectIndex(current);\r\n                }, 500);\r\n              }}\r\n              selectedIndex={selectIndex}\r\n            >\r\n              {smartQuestions?.map((item: any, index: number) => {\r\n                const { question, questionId, options, _id } = item;\r\n                return (\r\n                  <CarouselItem key={_id}>\r\n                    <HeaderBox className=\"lr-pd\">\r\n                      <GrayFont>\r\n                        {questionId} {tag}\r\n                      </GrayFont>\r\n                      <GrayFont>\r\n                        {index + 1}/{smartQuestions?.length}\r\n                      </GrayFont>\r\n                    </HeaderBox>\r\n                    <FontContent>{getMathpix(question)}</FontContent>\r\n                    <AnswerBox>\r\n                      {options?.map((optionItem: string, idx: number) => {\r\n                        return (\r\n                          <AnswerItem\r\n                            onClick={(): void => handleSelectAnswer(index, idx)}\r\n                            key={optionItem}\r\n                            className={\r\n                              aswArr[index as keyof typeof aswArr] ===\r\n                              numToLetter[idx as keyof typeof numToLetter]\r\n                                ? 'active'\r\n                                : ''\r\n                            }\r\n                          >\r\n                            {optionItem}\r\n                          </AnswerItem>\r\n                        );\r\n                      })}\r\n                    </AnswerBox>\r\n                  </CarouselItem>\r\n                );\r\n              })}\r\n            </Carousel>\r\n          </CarouseBox>\r\n          <ButtonBox>\r\n            <ButtonBlank />\r\n            <ButtonBoxInner>\r\n              {selectIndex + 1 === questionLen ? (\r\n                <Button type=\"primary\" onClick={handleSubmit}>\r\n                  提交\r\n                </Button>\r\n              ) : (\r\n                <Button type=\"primary\" onClick={handleQuestionChange}>\r\n                  下一题\r\n                </Button>\r\n              )}\r\n            </ButtonBoxInner>\r\n          </ButtonBox>\r\n        </Page>\r\n      )}\r\n      <LayerContainer effect=\"bottom\" needCloseTag visible={answerShow}>\r\n        <Answer\r\n          hide={(): void => setAnswerShow(false)}\r\n          answer={aswArr}\r\n          tag={tag}\r\n          answerNum={questionLen}\r\n          timeCounter={18}\r\n        />\r\n      </LayerContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Quick;\r\n"],"sourceRoot":""}