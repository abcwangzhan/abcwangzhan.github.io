{"version":3,"sources":["pages/Library/Quick/AnswerModal.tsx","pages/Library/Quick/Quick.tsx"],"names":["Answer","props","hide","tag","answerNum","answer","type","onClick","answerItemArr","i","push","className","getAnswer","history","replace","Quick","useState","aswArr","setAswArr","selectIndex","setSelectIndex","useLazyQuery","QUICK_QUESTION","getQuestion","data","dispatch","useContext","ProviderContext","smartQuestions","useHistory","getUrlParams","subject","tagId","questionLen","length","handleQuestionChange","current","useEffect","variables","trueAnswer","forEach","item","checkAnswer","quickTrueAnswer","quick","color","go","dots","style","height","afterChange","selectedIndex","map","index","question","questionId","options","optionItem","idx","questionNum","numToLetter","setTimeout","selectAnswer","Layer","open","effect","needCloseTag","content"],"mappings":"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","file":"9.42b4d481.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\r\nimport { Button, Icon } from 'antd-mobile';\r\nimport history from '@/utils/history';\r\nimport {\r\n  AnswerInner,\r\n  AnswerLabel,\r\n  AnswerList,\r\n  AnswerListBox,\r\n  AnswerListItem,\r\n  AnswerModal,\r\n  AnswerTitle,\r\n  CloseBox,\r\n} from './styles';\r\nimport { ButtonBox } from '../styles';\r\n\r\ninterface AnserProps {\r\n  hide: () => void;\r\n  answer: { [key: number]: string };\r\n  tag: string;\r\n  answerNum: number;\r\n}\r\nconst Answer: React.FC<AnserProps> = (props): ReactElement => {\r\n  const { hide, tag, answerNum, answer } = props;\r\n\r\n  // 获取已答答案\r\n  const getAnswer = (): ReactElement[] => {\r\n    const answerItemArr = [];\r\n    for (let i = 0; i < answerNum; i += 1) {\r\n      if (answer[i as keyof typeof answer]) {\r\n        answerItemArr.push(\r\n          <AnswerListItem className=\"true\">{i + 1}</AnswerListItem>\r\n        );\r\n      } else {\r\n        answerItemArr.push(<AnswerListItem>{i + 1}</AnswerListItem>);\r\n      }\r\n    }\r\n    return answerItemArr;\r\n  };\r\n\r\n  // 提交答题卡\r\n  const handleSubmit = (): void => {\r\n    hide();\r\n    history.replace(`/quick-result?tag=${tag}`);\r\n  };\r\n  return (\r\n    <AnswerModal>\r\n      <AnswerInner>\r\n        <AnswerTitle>\r\n          答题卡\r\n          <CloseBox>\r\n            <Icon type=\"cross\" onClick={(): void => hide()} />\r\n          </CloseBox>\r\n        </AnswerTitle>\r\n        <AnswerListBox>\r\n          <AnswerLabel>{tag}</AnswerLabel>\r\n          <AnswerList>{getAnswer()}</AnswerList>\r\n        </AnswerListBox>\r\n        <ButtonBox>\r\n          <Button type=\"primary\" onClick={handleSubmit}>\r\n            确定提交\r\n          </Button>\r\n        </ButtonBox>\r\n      </AnswerInner>\r\n    </AnswerModal>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import { Icon, Carousel, Button } from 'antd-mobile';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUICK_QUESTION } from '@/helpers/APIHelper';\r\nimport getUrlParams from '@/utils/get-url-params';\r\nimport Layer from '@/components/Layer';\r\nimport { numToLetter } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { TrueAnswer } from '@/reducer/reducer';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n} from '../styles';\r\nimport { AnswerBox, AnswerItem } from './styles';\r\nimport Answer from './AnswerModal';\r\n\r\nconst Quick: React.FC = () => {\r\n  const [aswArr, setAswArr] = useState({}); // 选择的答案集合\r\n  const [selectIndex, setSelectIndex] = useState(0); // 选择题目项\r\n  const [getQuestion, { data }] = useLazyQuery(QUICK_QUESTION); // 获取题目列表\r\n  const { dispatch } = useContext(ProviderContext);\r\n\r\n  const { smartQuestions } = data || {};\r\n  const history = useHistory();\r\n  const { subject, tagId, tag } = getUrlParams();\r\n  const questionLen = smartQuestions?.length || 0; // 题目数\r\n  console.log(data);\r\n  // 选择答案\r\n  const handleSelectAnswer = (questionNum: number, answerNum: number): void => {\r\n    setAswArr((item) => {\r\n      return {\r\n        ...item,\r\n        [questionNum]: numToLetter[answerNum as keyof typeof numToLetter], // 转换成ABCD\r\n      };\r\n    });\r\n    setTimeout(() => {\r\n      selectIndex + 1 < questionLen && handleQuestionChange(); // 选择答案后自动切换题目\r\n    }, 300);\r\n  };\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    setSelectIndex((current) => current + 1);\r\n  };\r\n  // 点击提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({\r\n      type: 'setSelectAnswer',\r\n      selectAnswer: aswArr,\r\n    });\r\n    Layer.open({\r\n      effect: 'bottom',\r\n      needCloseTag: true,\r\n      content: (\r\n        <Answer\r\n          hide={Layer.hide}\r\n          answer={aswArr}\r\n          tag={tag}\r\n          answerNum={questionLen}\r\n        />\r\n      ),\r\n    });\r\n  };\r\n  // 查询题目列表\r\n  useEffect(() => {\r\n    getQuestion({\r\n      variables: { subject, tagId },\r\n    });\r\n  }, [getQuestion, subject, tagId]);\r\n\r\n  // 缓存在state中正确答案\r\n  useEffect(() => {\r\n    const trueAnswer: TrueAnswer[] = [];\r\n    smartQuestions?.forEach((item: { checkAnswer: TrueAnswer }) =>\r\n      trueAnswer.push(item.checkAnswer)\r\n    );\r\n    dispatch?.({\r\n      type: 'setQuickTrueAnswer',\r\n      quickTrueAnswer: trueAnswer,\r\n    });\r\n    dispatch?.({\r\n      type: 'setQuick',\r\n      quick: smartQuestions,\r\n    });\r\n  }, [dispatch, smartQuestions]);\r\n  return (\r\n    <Page>\r\n      <HeaderBox>\r\n        <Icon\r\n          type=\"cross\"\r\n          color=\"#262626\"\r\n          onClick={(): void => history.go(-1)}\r\n        />\r\n        <GrayFont>00:18</GrayFont>\r\n      </HeaderBox>\r\n      {questionLen > 0 && (\r\n        <CarouseBox>\r\n          <Carousel\r\n            dots={false}\r\n            style={{ height: '100%' }}\r\n            afterChange={(current: number): void => setSelectIndex(current)}\r\n            selectedIndex={selectIndex}\r\n          >\r\n            {smartQuestions?.map((item: any, index: number) => {\r\n              const { question, questionId, options } = item;\r\n              return (\r\n                <CarouselItem>\r\n                  <HeaderBox className=\"lr-pd\">\r\n                    <GrayFont>\r\n                      {questionId} {tag}\r\n                    </GrayFont>\r\n                    <GrayFont>\r\n                      {index + 1}/{smartQuestions?.length}\r\n                    </GrayFont>\r\n                  </HeaderBox>\r\n                  <FontContent>{question}</FontContent>\r\n                  <AnswerBox>\r\n                    {options?.map((optionItem: string, idx: number) => {\r\n                      return (\r\n                        <AnswerItem\r\n                          onClick={(): void => handleSelectAnswer(index, idx)}\r\n                          className={\r\n                            aswArr[index as keyof typeof aswArr] ===\r\n                            numToLetter[idx as keyof typeof numToLetter]\r\n                              ? 'active'\r\n                              : ''\r\n                          }\r\n                        >\r\n                          {optionItem}\r\n                        </AnswerItem>\r\n                      );\r\n                    })}\r\n                  </AnswerBox>\r\n                </CarouselItem>\r\n              );\r\n            })}\r\n          </Carousel>\r\n        </CarouseBox>\r\n      )}\r\n      <ButtonBox>\r\n        <ButtonBoxInner>\r\n          {selectIndex + 1 === questionLen ? (\r\n            <Button type=\"primary\" onClick={handleSubmit}>\r\n              提交\r\n            </Button>\r\n          ) : (\r\n            <Button type=\"primary\" onClick={handleQuestionChange}>\r\n              下一题\r\n            </Button>\r\n          )}\r\n        </ButtonBoxInner>\r\n      </ButtonBox>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Quick;\r\n"],"sourceRoot":""}