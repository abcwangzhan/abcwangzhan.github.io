{"version":3,"sources":["pages/Library/Exam/Exam.tsx"],"names":["Exam","openModal","answerSheet","openResult","resultSheet","useState","answerMap","setAnswerMap","selectIndex","setSelectIndex","useContext","ProviderContext","state","dispatch","examQuestion","history","useHistory","type","color","onClick","go","dots","style","height","afterChange","current","selectedIndex","map","qusItem","index","sourceType","questionId","question","subject","date","checkAnswers","letterTemp","letterStr","split","preAnswer","className","dateToYear","length","item","itemLabel","splice","join","key","label","changeAnswer","value","questionNum","cuttent","handleEditor","examSelectAnswer","selectAnswer"],"mappings":"4TA0JeA,EAnIQ,WACrB,IAAQC,EAAcC,cAAdD,UACWE,EAAeC,cAA1BH,UACR,EAAkCI,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEA,EAA4BC,qBAAWC,KAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,EAA8BD,EAAtBE,oBAAR,MAAuB,GAAvB,EACMC,EAAUC,cAgChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uBACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAYJ,EAAQK,IAAI,MAEnC,kBAAC,IAAD,eAEF,kBAAC,IAAD,KACE,uBACEC,MAAM,EACNC,MAAO,CAAEC,OAAQ,QACjBC,YAAa,SAACC,GAAD,OAA2BhB,EAAegB,IACvDC,cAAelB,GAEdM,EAAaa,KAAI,SAACC,EAASC,GAC1B,IACEC,EAMEF,EANFE,WACAC,EAKEH,EALFG,WACAC,EAIEJ,EAJFI,SACAC,EAGEL,EAHFK,QACAC,EAEEN,EAFFM,KACAC,EACEP,EADFO,aAEIC,EAAaC,IAAUC,MAAM,IAE7BC,EACJjC,EAFcuB,EAAQ,IAE0B,GAClD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWW,UAAU,SACnB,kBAAC,IAAD,KACGT,EADH,cACmBD,GADnB,OACgCW,YAAWP,IAD3C,OACmDD,IAEnD,kBAAC,IAAD,KACGJ,EAAQ,EADX,IACef,EAAa4B,SAG9B,kBAAC,IAAD,KAAcV,GACd,kBAAC,IAAD,KACE,kBAAC,IAAD,qBACCG,EAAaR,KAAI,SAACgB,GAEjB,IAAMC,EAAYR,EACfS,OAAO,EAAGF,EAAKD,QACfI,KAAK,IACR,OACE,kBAAC,IAAD,CAAUC,IAAKH,GACb,8BAAOA,GACP,kBAAC,IAAD,KACE,8BACGL,EAAUK,IAEb,kBAAC,IAAD,CACEzB,QAAS,kBACPlB,EAAU,CACR+C,MAAOJ,EACPK,aAAc,SAACC,GAAD,OAxFvB,SACnBjC,EACAiC,EACAC,GAEA,IAAMZ,EACJjC,EAAU6C,IAA0C,GACtDZ,EAAUtB,GAAQiC,EAElB3C,GAAa,SAAC6C,GACZ,OAAO,2BACFA,GADL,kBAEGD,EAAcZ,OA6EWc,CAAaT,EAAWM,EAAOrB,EAAQ,qBAcnE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGrB,EAAc,IAAMM,EAAa4B,OAChC,uBAAQzB,KAAK,UAAUE,QAnFZ,WACX,OAARN,QAAQ,IAARA,KAAW,CAAEI,KAAM,sBAAuBqC,iBAAkBhD,IAE5DH,EAAW,CAAEc,KAAM,OAAQsC,aAAcjD,MAgFjC,8CAIA,uBAAQW,KAAK,UAAUE,QA5FJ,WAC3BV,GAAe,SAACgB,GAAD,OAAaA,EAAU,OA2F9B","file":"6.0433d8f5.chunk.js","sourcesContent":["import { Icon, Carousel, Button } from 'antd-mobile';\r\nimport React, { useContext, useState } from 'react';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { letterStr } from '@/constants/globalDatas';\r\nimport { useHistory } from 'react-router-dom';\r\nimport answerSheet from '../Topic/answerSheet';\r\nimport resultSheet from '../Topic/resultSheet';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  CardBox,\r\n  CardItem,\r\n  EditorFont,\r\n  EditorIcon,\r\n} from '../styles';\r\nimport dateToYear from '../utils/dateToYear';\r\n\r\nconst Exam: React.FC = () => {\r\n  const { openModal } = answerSheet();\r\n  const { openModal: openResult } = resultSheet();\r\n  const [answerMap, setAnswerMap] = useState({});\r\n  const [selectIndex, setSelectIndex] = useState(0); // 选择题目项\r\n\r\n  const { state, dispatch } = useContext(ProviderContext);\r\n  const { examQuestion = [] } = state;\r\n  const history = useHistory();\r\n\r\n  // 回显选中的答案\r\n  const handleEditor = (\r\n    type: string,\r\n    value: string,\r\n    questionNum: number\r\n  ): void => {\r\n    const preAnswer: { [key: string]: string } =\r\n      answerMap[questionNum as keyof typeof answerMap] || {};\r\n    preAnswer[type] = value;\r\n\r\n    setAnswerMap((cuttent) => {\r\n      return {\r\n        ...cuttent,\r\n        [questionNum]: preAnswer,\r\n      };\r\n    });\r\n  };\r\n\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    setSelectIndex((current) => current + 1);\r\n  };\r\n\r\n  // 提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({ type: 'setExamSelectAnswer', examSelectAnswer: answerMap });\r\n\r\n    openResult({ type: 'exam', selectAnswer: answerMap });\r\n  };\r\n\r\n  return (\r\n    <Page>\r\n      <HeaderBox>\r\n        <Icon\r\n          type=\"cross\"\r\n          color=\"#262626\"\r\n          onClick={(): void => history.go(-2)}\r\n        />\r\n        <GrayFont>00:18</GrayFont>\r\n      </HeaderBox>\r\n      <CarouseBox>\r\n        <Carousel\r\n          dots={false}\r\n          style={{ height: '100%' }}\r\n          afterChange={(current: number): void => setSelectIndex(current)}\r\n          selectedIndex={selectIndex}\r\n        >\r\n          {examQuestion.map((qusItem, index) => {\r\n            const {\r\n              sourceType,\r\n              questionId,\r\n              question,\r\n              subject,\r\n              date,\r\n              checkAnswers,\r\n            } = qusItem;\r\n            const letterTemp = letterStr.split('');\r\n            const prevNum = index + 1;\r\n            const preAnswer =\r\n              answerMap[prevNum as keyof typeof answerMap] || {};\r\n            return (\r\n              <CarouselItem>\r\n                <HeaderBox className=\"lr-pd\">\r\n                  <GrayFont>\r\n                    {questionId} {`${sourceType}${dateToYear(date)}${subject}`}\r\n                  </GrayFont>\r\n                  <GrayFont>\r\n                    {index + 1}/{examQuestion.length}\r\n                  </GrayFont>\r\n                </HeaderBox>\r\n                <FontContent>{question}</FontContent>\r\n                <CardBox>\r\n                  <CardItem>解答</CardItem>\r\n                  {checkAnswers.map((item) => {\r\n                    // 获取答案label\r\n                    const itemLabel = letterTemp\r\n                      .splice(0, item.length)\r\n                      .join('');\r\n                    return (\r\n                      <CardItem key={itemLabel}>\r\n                        <span>{itemLabel}</span>\r\n                        <EditorFont>\r\n                          <span>\r\n                            {preAnswer[itemLabel as keyof typeof preAnswer]}\r\n                          </span>\r\n                          <EditorIcon\r\n                            onClick={(): void =>\r\n                              openModal({\r\n                                label: itemLabel,\r\n                                changeAnswer: (value) =>\r\n                                  handleEditor(itemLabel, value, index + 1),\r\n                              })\r\n                            }\r\n                          />\r\n                        </EditorFont>\r\n                      </CardItem>\r\n                    );\r\n                  })}\r\n                </CardBox>\r\n              </CarouselItem>\r\n            );\r\n          })}\r\n        </Carousel>\r\n      </CarouseBox>\r\n      <ButtonBox>\r\n        <ButtonBoxInner>\r\n          {selectIndex + 1 === examQuestion.length ? (\r\n            <Button type=\"primary\" onClick={handleSubmit}>\r\n              提交并查看结果\r\n            </Button>\r\n          ) : (\r\n            <Button type=\"primary\" onClick={handleQuestionChange}>\r\n              下一题\r\n            </Button>\r\n          )}\r\n        </ButtonBoxInner>\r\n      </ButtonBox>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Exam;\r\n"],"sourceRoot":""}