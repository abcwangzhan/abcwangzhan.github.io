{"version":3,"sources":["pages/Library/Topic/Parsing/Parsing.tsx"],"names":["Parsing","history","useHistory","tag","getUrlParams","state","useContext","ProviderContext","topic","topicSelectAnswer","id","type","color","onClick","go","defaultIndex","loop","indicator","onIndexChange","document","getElementById","scrollTo","map","topicItem","index","questionId","question","checkAnswers","parse","prevSelect","Item","key","className","length","getMathpix","val","item","itemArr","split","item2","index2","isTrue","forEach","item3","answer","join"],"mappings":"qQAoJeA,EAzHW,WACxB,IAAMC,EAAUC,cACRC,EAAQC,cAARD,IAEAE,EAAUC,qBAAWC,KAArBF,MACR,EAA+CA,EAAvCG,aAAR,MAAgB,GAAhB,IAA+CH,EAA3BI,yBAApB,MAAwC,GAAxC,EAMA,OACE,kBAAC,IAAD,CAAMC,GAAG,cACP,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,uBACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAYZ,EAAQa,IAAI,QAIvC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,aAAc,EACdC,MAAM,EACNC,UAAW,kBAAY,MACvBC,cArBoB,WAAa,IAAD,EACtC,UAAAC,SAASC,eAAe,qBAAxB,SAAuCC,SAAS,EAAG,KAgB/C,OAMGb,QANH,IAMGA,OANH,EAMGA,EAAOc,KAAI,SAACC,EAAWC,GACtB,IAAQC,EAA8CF,EAA9CE,WAAYC,EAAkCH,EAAlCG,SAAUC,EAAwBJ,EAAxBI,aAAcC,EAAUL,EAAVK,MAItCC,EAAapB,EADHe,EAAQ,GAExB,OACE,kBAAC,IAAOM,KAAR,CAAaC,IAAKN,EAAatB,GAC7B,kBAAC,IAAD,CAAW6B,UAAU,SACnB,kBAAC,IAAD,KACGP,EADH,IACgBtB,GAEhB,kBAAC,IAAD,KACGqB,EAAQ,EADX,IACehB,EAAMyB,SAGvB,kBAAC,IAAD,KAAcC,YAAWR,IACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,qBADF,OAEGC,QAFH,IAEGA,OAFH,EAEGA,EAAcL,KAAI,SAACa,GAAS,IAAD,EAOpBC,EAAOD,EAAI,GACXE,EAAO,UAAGD,EAAKZ,aAAR,aAAG,EAAYc,MAAM,IAClC,OACE,kBAAC,IAAD,CAAaP,IAAKK,EAAKZ,OACrB,kBAAC,IAAD,KAAeY,EAAKZ,OACpB,kBAAC,IAAD,YACGa,QADH,IACGA,OADH,EACGA,EAASf,KAAI,SAACiB,EAAOC,GAEpB,IAAIC,GAAS,EAMb,OALAN,EAAIO,SAAQ,SAACC,GAAW,IAAD,EACrBF,GACY,OAAVZ,QAAU,IAAVA,GAAA,UAAAA,EAAaO,EAAKZ,cAAlB,eAA0Bc,MAAM,IAAIE,MACpCG,EAAMC,OAAON,MAAM,IAAIE,MAGzB,kBAAC,IAAD,CACER,UAAWS,EAAS,GAAK,mBASzC,kBAAC,IAAD,KACE,yBAAKT,UAAU,SAAf,4BADF,OAEGL,QAFH,IAEGA,OAFH,EAEGA,EAAcL,KAAI,SAACa,GAClB,IAAMC,EAAOD,EAAI,GAMjB,OACE,kBAAC,IAAD,CAAaJ,IAAKK,EAAKZ,OACrB,kBAAC,IAAD,KAAeY,EAAKZ,OACpB,kBAAC,IAAD,YACGW,QADH,IACGA,OADH,EACGA,EAAKb,KAAI,SAACiB,GAAD,OAAWA,EAAMK,UAAQC,KAAK,eAKhD,6BAlBF,qBAoBE,6BACCX,YAAWN,UAOxB,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,uBAAQjB,KAAK,UAAUE,QAAS,kBAAYZ,EAAQa,IAAI,KAAxD","file":"10.d2d9a3d7.chunk.js","sourcesContent":["import { ProviderContext } from '@/reducer/context';\nimport getUrlParams from '@/utils/get-url-params';\nimport { Button, Icon } from 'antd-mobile';\nimport { Swiper } from 'antd-mobile-v5';\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Page,\n  HeaderBox,\n  GrayFont,\n  FontContent,\n  CarouseBox,\n  ButtonBox,\n  ButtonBoxInner,\n  ParsingFont,\n  ResolveBox,\n  ResolveItem,\n  ResolveLabel,\n  ResolveResultItem,\n  ResolveResultList,\n  ResolveTitle,\n  HeaderBlank,\n  HeaderInner,\n  ButtonBlank,\n} from '../../styles';\nimport getMathpix from '../../utils/getMathpix';\n\nconst Parsing: React.FC = () => {\n  const history = useHistory();\n  const { tag } = getUrlParams();\n\n  const { state } = useContext(ProviderContext);\n  const { topic = [], topicSelectAnswer = {} } = state;\n  // 监听跑马灯变化\n  const handleOnIndexChange = (): void => {\n    document.getElementById('topic_page')?.scrollTo(0, 0);\n  };\n\n  return (\n    <Page id=\"topic_page\">\n      <HeaderBox>\n        <HeaderBlank />\n        <HeaderInner>\n          <Icon\n            type=\"cross\"\n            color=\"#262626\"\n            onClick={(): void => history.go(-3)}\n          />\n        </HeaderInner>\n      </HeaderBox>\n      <CarouseBox>\n        <Swiper\n          defaultIndex={0}\n          loop={false}\n          indicator={(): null => null}\n          onIndexChange={handleOnIndexChange}\n        >\n          {topic?.map((topicItem, index) => {\n            const { questionId, question, checkAnswers, parse } = topicItem;\n            // const letterTemp = letterStr.split(''); // 遍历解答label\n            // const letterTrueTemp = letterStr.split(''); // 遍历正确答案label\n            const prevNum = index + 1;\n            const prevSelect = topicSelectAnswer[prevNum];\n            return (\n              <Swiper.Item key={questionId + tag}>\n                <HeaderBox className=\"lr-pd\">\n                  <GrayFont>\n                    {questionId} {tag}\n                  </GrayFont>\n                  <GrayFont>\n                    {index + 1}/{topic.length}\n                  </GrayFont>\n                </HeaderBox>\n                <FontContent>{getMathpix(question)}</FontContent>\n                <ResolveBox>\n                  <ResolveTitle>解答</ResolveTitle>\n                  {checkAnswers?.map((val) => {\n                    // 获取答案label\n                    // const itemLabel = letterTemp\n                    //   .splice(0, item.length)\n                    //   .join('');\n                    // item 中可能有多种答案，但是其中index是相同的\n                    // index的取值可以直接取第一个\n                    const item = val[0];\n                    const itemArr = item.index?.split('');\n                    return (\n                      <ResolveItem key={item.index}>\n                        <ResolveLabel>{item.index}</ResolveLabel>\n                        <ResolveResultList>\n                          {itemArr?.map((item2, index2) => {\n                            // itemArr遍历为了确定判断第几个选项答案是否正确\n                            let isTrue = false;\n                            val.forEach((item3) => {\n                              isTrue =\n                                prevSelect?.[item.index]?.split('')[index2] ===\n                                item3.answer.split('')[index2];\n                            });\n                            return (\n                              <ResolveResultItem\n                                className={isTrue ? '' : 'error'}\n                              />\n                            );\n                          })}\n                        </ResolveResultList>\n                      </ResolveItem>\n                    );\n                  })}\n                </ResolveBox>\n                <ParsingFont>\n                  <div className=\"title\">正确答案</div>\n                  {checkAnswers?.map((val) => {\n                    const item = val[0];\n\n                    // 获取答案label\n                    // const itemLabel = letterTrueTemp\n                    //   .splice(0, item.length)\n                    //   .join('');\n                    return (\n                      <ResolveItem key={item.index}>\n                        <ResolveLabel>{item.index}</ResolveLabel>\n                        <ResolveResultList>\n                          {val?.map((item2) => item2.answer).join('、')}\n                        </ResolveResultList>\n                      </ResolveItem>\n                    );\n                  })}\n                  <br />\n                  解析：\n                  <br />\n                  {getMathpix(parse)}\n                </ParsingFont>\n              </Swiper.Item>\n            );\n          })}\n        </Swiper>\n      </CarouseBox>\n      <ButtonBox>\n        <ButtonBlank />\n        <ButtonBoxInner>\n          <Button type=\"primary\" onClick={(): void => history.go(-1)}>\n            返回报告\n          </Button>\n        </ButtonBoxInner>\n      </ButtonBox>\n    </Page>\n  );\n};\n\nexport default Parsing;\n"],"sourceRoot":""}