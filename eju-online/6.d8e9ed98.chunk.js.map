{"version":3,"sources":["pages/Library/Exam/Exam.tsx"],"names":["Exam","openModal","answerSheet","useState","answerMap","setAnswerMap","showResult","setShowResult","isShowResult","setIsShowResult","useContext","ProviderContext","state","dispatch","examQuestion","history","useHistory","swiperRef","useRef","swiperPageRef","cutDownRef","useEffect","length","id","type","color","onClick","go","CutDown","ref","defaultIndex","loop","indicator","total","current","onIndexChange","document","getElementById","scrollTo","setTimeout","map","qusItem","index","sourceType","questionId","question","subject","date","checkAnswers","preAnswer","Item","key","className","examEnum","dateToYear","subjectEnum","getMathpix","val","item","label","changeAnswer","value","questionNum","cuttent","handleEditor","examSelectAnswer","swipeNext","Layer","effect","needCloseTag","visible","hide","selectAnswer","getTimeCounter","stop"],"mappings":"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","file":"6.d8e9ed98.chunk.js","sourcesContent":["import { Icon, Button } from 'antd-mobile';\r\nimport { Swiper } from 'antd-mobile-v5';\r\nimport { SwiperRef } from 'antd-mobile-v5/es/components/swiper';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { ProviderContext } from '@/reducer/context';\r\n// import { letterStr } from '@/constants/globalDatas';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { LayerContainer } from '@/components/Layer';\r\nimport { examEnum, subjectEnum } from '@/constants/globalDatas';\r\nimport answerSheet from '../Topic/answerSheet';\r\nimport { ResultSheet } from '../Topic/resultSheet';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  CardBox,\r\n  CardItem,\r\n  EditorFont,\r\n  EditorIcon,\r\n  HeaderBlank,\r\n  HeaderInner,\r\n  ButtonBlank,\r\n  FontContent,\r\n} from '../styles';\r\nimport dateToYear from '../utils/dateToYear';\r\nimport getMathpix from '../utils/getMathpix';\r\nimport CutDown from '../components/CutDown';\r\n\r\nconst Exam: React.FC = () => {\r\n  const { openModal } = answerSheet();\r\n  // const { openModal: openResult } = resultSheet();\r\n  const [answerMap, setAnswerMap] = useState({});\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [isShowResult, setIsShowResult] = useState(false); // 是否展示查看结果按钮\r\n  const { state, dispatch } = useContext(ProviderContext);\r\n  const { examQuestion = [] } = state;\r\n  const history = useHistory();\r\n  const swiperRef = useRef<SwiperRef>(null);\r\n  const swiperPageRef = useRef(1); // 默认在第一页\r\n  const cutDownRef = useRef<{ stop: () => number }>();\r\n\r\n  // 回显选中的答案\r\n  const handleEditor = (\r\n    type: string,\r\n    value: string,\r\n    questionNum: number\r\n  ): void => {\r\n    const preAnswer: { [key: string]: string } =\r\n      answerMap[questionNum as keyof typeof answerMap] || {};\r\n    preAnswer[type] = value;\r\n\r\n    setAnswerMap((cuttent) => {\r\n      return {\r\n        ...cuttent,\r\n        [questionNum]: preAnswer,\r\n      };\r\n    });\r\n  };\r\n\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    swiperRef.current?.swipeNext();\r\n  };\r\n\r\n  // 提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({ type: 'setExamSelectAnswer', examSelectAnswer: answerMap });\r\n    setShowResult(true);\r\n  };\r\n  // 轮播图切换\r\n  const indicatorChange = (total: number, current: number): null => {\r\n    swiperPageRef.current = current + 1;\r\n    return null;\r\n  };\r\n  // 监听跑马灯变化\r\n  const handleOnIndexChange = (): void => {\r\n    document.getElementById('exam_page')?.scrollTo(0, 0);\r\n    console.log(swiperPageRef.current);\r\n    setTimeout(() => {\r\n      if (examQuestion.length === swiperPageRef.current) {\r\n        setIsShowResult(true);\r\n      } else {\r\n        setIsShowResult(false);\r\n      }\r\n    }, 500);\r\n  };\r\n  useEffect(() => {\r\n    // 只有一道题时候展示产看结果按钮\r\n    examQuestion?.length === 1 && setIsShowResult(true);\r\n  }, [examQuestion?.length]);\r\n\r\n  return (\r\n    <>\r\n      <Page id=\"exam_page\">\r\n        <HeaderBox>\r\n          <HeaderBlank />\r\n          <HeaderInner>\r\n            <Icon\r\n              type=\"cross\"\r\n              color=\"#262626\"\r\n              onClick={(): void => history.go(-2)}\r\n            />\r\n            <CutDown ref={cutDownRef} />\r\n          </HeaderInner>\r\n        </HeaderBox>\r\n        <CarouseBox>\r\n          <Swiper\r\n            defaultIndex={0}\r\n            loop={false}\r\n            indicator={indicatorChange}\r\n            ref={swiperRef}\r\n            onIndexChange={handleOnIndexChange}\r\n          >\r\n            {examQuestion.map((qusItem, index) => {\r\n              const {\r\n                sourceType,\r\n                questionId,\r\n                question,\r\n                subject,\r\n                date,\r\n                checkAnswers,\r\n              } = qusItem;\r\n              // const letterTemp = letterStr.split('');\r\n              const prevNum = index + 1;\r\n              const preAnswer =\r\n                answerMap[prevNum as keyof typeof answerMap] || {};\r\n              return (\r\n                <Swiper.Item key={questionId}>\r\n                  <HeaderBox className=\"lr-pd\">\r\n                    <GrayFont>\r\n                      {questionId}\r\n                      {`${\r\n                        examEnum[sourceType as keyof typeof examEnum]\r\n                      }${dateToYear(date)}${\r\n                        subjectEnum[subject as keyof typeof subjectEnum]\r\n                      }`}\r\n                    </GrayFont>\r\n                    <GrayFont>\r\n                      {index + 1}/{examQuestion.length}\r\n                    </GrayFont>\r\n                  </HeaderBox>\r\n                  <FontContent>{getMathpix(question)}</FontContent>\r\n                  <CardBox>\r\n                    <CardItem>解答</CardItem>\r\n                    {checkAnswers.map((val) => {\r\n                      const item = val[0];\r\n                      // 获取答案label\r\n                      // const itemLabel = letterTemp\r\n                      //   .splice(0, item.length)\r\n                      //   .join('');\r\n                      return (\r\n                        <CardItem key={item.index}>\r\n                          <span>{item.index}</span>\r\n                          <EditorFont>\r\n                            <span>\r\n                              {preAnswer[item.index as keyof typeof preAnswer]}\r\n                            </span>\r\n                            <EditorIcon\r\n                              className=\"iconfont icon-edit\"\r\n                              onClick={(): void =>\r\n                                openModal({\r\n                                  label: item.index,\r\n                                  changeAnswer: (value) =>\r\n                                    handleEditor(item.index, value, index + 1),\r\n                                })\r\n                              }\r\n                            />\r\n                          </EditorFont>\r\n                        </CardItem>\r\n                      );\r\n                    })}\r\n                  </CardBox>\r\n                </Swiper.Item>\r\n              );\r\n            })}\r\n          </Swiper>\r\n        </CarouseBox>\r\n        <ButtonBox>\r\n          <ButtonBlank />\r\n          <ButtonBoxInner>\r\n            {isShowResult ? (\r\n              <Button type=\"primary\" onClick={handleSubmit}>\r\n                提交并查看结果\r\n              </Button>\r\n            ) : (\r\n              <Button type=\"primary\" onClick={handleQuestionChange}>\r\n                下一题\r\n              </Button>\r\n            )}\r\n          </ButtonBoxInner>\r\n        </ButtonBox>\r\n      </Page>\r\n      <LayerContainer effect=\"bottom\" needCloseTag visible={showResult}>\r\n        <ResultSheet\r\n          hide={(): void => setShowResult(false)}\r\n          type=\"exam\"\r\n          selectAnswer={answerMap}\r\n          getTimeCounter={(): number => cutDownRef.current?.stop() || 0}\r\n        />\r\n      </LayerContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Exam;\r\n"],"sourceRoot":""}