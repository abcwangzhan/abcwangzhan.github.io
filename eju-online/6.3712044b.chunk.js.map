{"version":3,"sources":["pages/Library/Exam/Exam.tsx"],"names":["Exam","openModal","answerSheet","useState","answerMap","setAnswerMap","selectIndex","setSelectIndex","showResult","setShowResult","useContext","ProviderContext","state","dispatch","examQuestion","history","useHistory","useEffect","document","getElementById","scrollTo","id","type","color","onClick","go","dots","style","height","afterChange","current","setTimeout","selectedIndex","map","qusItem","index","sourceType","questionId","question","subject","date","checkAnswers","preAnswer","className","dateToYear","subjectEnum","length","getMathpix","val","item","key","label","changeAnswer","value","questionNum","cuttent","handleEditor","examSelectAnswer","Layer","effect","needCloseTag","visible","hide","selectAnswer","timeCounter"],"mappings":"wVA0LeA,EA7JQ,WACrB,IAAQC,EAAcC,cAAdD,UAER,EAAkCE,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA4BC,qBAAWC,KAA/BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACf,EAA8BD,EAAtBE,oBAAR,MAAuB,GAAvB,EACMC,EAAUC,cAoChB,OAHAC,qBAAU,WAAO,IAAD,EACd,UAAAC,SAASC,eAAe,oBAAxB,SAAsCC,SAAS,EAAG,KACjD,CAACd,IAEF,oCACE,kBAAC,IAAD,CAAMe,GAAG,aACP,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,uBACEC,KAAK,QACLC,MAAM,UACNC,QAAS,kBAAYT,EAAQU,IAAI,MAEnC,kBAAC,IAAD,gBAGJ,kBAAC,IAAD,KACE,uBACEC,MAAM,EACNC,MAAO,CAAEC,OAAQ,QACjBC,YAAa,SAACC,GACZC,YAAW,WACTxB,EAAeuB,KACd,MAELE,cAAe1B,GAEdQ,EAAamB,KAAI,SAACC,EAASC,GAC1B,IACEC,EAMEF,EANFE,WACAC,EAKEH,EALFG,WACAC,EAIEJ,EAJFI,SACAC,EAGEL,EAHFK,QACAC,EAEEN,EAFFM,KACAC,EACEP,EADFO,aAIIC,EACJtC,EAFc+B,EAAQ,IAE0B,GAClD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWQ,UAAU,SACnB,kBAAC,IAAD,KACGN,EAAY,IADf,UAEMD,GAFN,OAEmBQ,YAAWJ,IAF9B,OAGIK,IAAYN,KAGhB,kBAAC,IAAD,KACGJ,EAAQ,EADX,IACerB,EAAagC,SAG9B,kBAAC,IAAD,KAAcC,YAAWT,IACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,qBACCG,EAAaR,KAAI,SAACe,GACjB,IAAMC,EAAOD,EAAI,GAKjB,OACE,kBAAC,IAAD,CAAUE,IAAKD,EAAKd,OAClB,8BAAOc,EAAKd,OACZ,kBAAC,IAAD,KACE,8BACGO,EAAUO,EAAKd,QAElB,kBAAC,IAAD,CACEX,QAAS,kBACPvB,EAAU,CACRkD,MAAOF,EAAKd,MACZiB,aAAc,SAACC,GAAD,OAxGzB,SACnB/B,EACA+B,EACAC,GAEA,IAAMZ,EACJtC,EAAUkD,IAA0C,GACtDZ,EAAUpB,GAAQ+B,EAElBhD,GAAa,SAACkD,GACZ,OAAO,2BACFA,GADL,kBAEGD,EAAcZ,OA6Fac,CAAaP,EAAKd,MAAOkB,EAAOlB,EAAQ,qBAcpE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACG7B,EAAc,IAAMQ,EAAagC,OAChC,uBAAQxB,KAAK,UAAUE,QApGd,WACX,OAARX,QAAQ,IAARA,KAAW,CAAES,KAAM,sBAAuBmC,iBAAkBrD,IAE5DK,GAAc,KAiGJ,8CAIA,uBAAQa,KAAK,UAAUE,QA7GN,WAC3BjB,GAAe,SAACuB,GAAD,OAAaA,EAAU,OA4G5B,yBAOR,kBAAC4B,EAAA,EAAD,CAAgBC,OAAO,SAASC,cAAY,EAACC,QAASrD,GACpD,kBAAC,IAAD,CACEsD,KAAM,kBAAYrD,GAAc,IAChCa,KAAK,OACLyC,aAAc3D,EACd4D,YAAa","file":"6.3712044b.chunk.js","sourcesContent":["import { Icon, Carousel, Button } from 'antd-mobile';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { ProviderContext } from '@/reducer/context';\r\n// import { letterStr } from '@/constants/globalDatas';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { LayerContainer } from '@/components/Layer';\r\nimport { subjectEnum } from '@/constants/globalDatas';\r\nimport answerSheet from '../Topic/answerSheet';\r\nimport { ResultSheet } from '../Topic/resultSheet';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  CardBox,\r\n  CardItem,\r\n  EditorFont,\r\n  EditorIcon,\r\n  HeaderBlank,\r\n  HeaderInner,\r\n  ButtonBlank,\r\n  FontContent,\r\n} from '../styles';\r\nimport dateToYear from '../utils/dateToYear';\r\nimport getMathpix from '../utils/getMathpix';\r\n\r\nconst Exam: React.FC = () => {\r\n  const { openModal } = answerSheet();\r\n  // const { openModal: openResult } = resultSheet();\r\n  const [answerMap, setAnswerMap] = useState({});\r\n  const [selectIndex, setSelectIndex] = useState(0); // 选择题目项\r\n  const [showResult, setShowResult] = useState(false);\r\n  const { state, dispatch } = useContext(ProviderContext);\r\n  const { examQuestion = [] } = state;\r\n  const history = useHistory();\r\n\r\n  // 回显选中的答案\r\n  const handleEditor = (\r\n    type: string,\r\n    value: string,\r\n    questionNum: number\r\n  ): void => {\r\n    const preAnswer: { [key: string]: string } =\r\n      answerMap[questionNum as keyof typeof answerMap] || {};\r\n    preAnswer[type] = value;\r\n\r\n    setAnswerMap((cuttent) => {\r\n      return {\r\n        ...cuttent,\r\n        [questionNum]: preAnswer,\r\n      };\r\n    });\r\n  };\r\n\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    setSelectIndex((current) => current + 1);\r\n  };\r\n\r\n  // 提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({ type: 'setExamSelectAnswer', examSelectAnswer: answerMap });\r\n\r\n    setShowResult(true);\r\n  };\r\n\r\n  // 切换题目时回滚到最顶端\r\n  useEffect(() => {\r\n    document.getElementById('exam_page')?.scrollTo(0, 0);\r\n  }, [selectIndex]);\r\n  return (\r\n    <>\r\n      <Page id=\"exam_page\">\r\n        <HeaderBox>\r\n          <HeaderBlank />\r\n          <HeaderInner>\r\n            <Icon\r\n              type=\"cross\"\r\n              color=\"#262626\"\r\n              onClick={(): void => history.go(-2)}\r\n            />\r\n            <GrayFont>00:18</GrayFont>\r\n          </HeaderInner>\r\n        </HeaderBox>\r\n        <CarouseBox>\r\n          <Carousel\r\n            dots={false}\r\n            style={{ height: '100%' }}\r\n            afterChange={(current: number): void => {\r\n              setTimeout(() => {\r\n                setSelectIndex(current);\r\n              }, 500);\r\n            }}\r\n            selectedIndex={selectIndex}\r\n          >\r\n            {examQuestion.map((qusItem, index) => {\r\n              const {\r\n                sourceType,\r\n                questionId,\r\n                question,\r\n                subject,\r\n                date,\r\n                checkAnswers,\r\n              } = qusItem;\r\n              // const letterTemp = letterStr.split('');\r\n              const prevNum = index + 1;\r\n              const preAnswer =\r\n                answerMap[prevNum as keyof typeof answerMap] || {};\r\n              return (\r\n                <CarouselItem>\r\n                  <HeaderBox className=\"lr-pd\">\r\n                    <GrayFont>\r\n                      {questionId}{' '}\r\n                      {`${sourceType}${dateToYear(date)}${\r\n                        subjectEnum[subject as keyof typeof subjectEnum]\r\n                      }`}\r\n                    </GrayFont>\r\n                    <GrayFont>\r\n                      {index + 1}/{examQuestion.length}\r\n                    </GrayFont>\r\n                  </HeaderBox>\r\n                  <FontContent>{getMathpix(question)}</FontContent>\r\n                  <CardBox>\r\n                    <CardItem>解答</CardItem>\r\n                    {checkAnswers.map((val) => {\r\n                      const item = val[0];\r\n                      // 获取答案label\r\n                      // const itemLabel = letterTemp\r\n                      //   .splice(0, item.length)\r\n                      //   .join('');\r\n                      return (\r\n                        <CardItem key={item.index}>\r\n                          <span>{item.index}</span>\r\n                          <EditorFont>\r\n                            <span>\r\n                              {preAnswer[item.index as keyof typeof preAnswer]}\r\n                            </span>\r\n                            <EditorIcon\r\n                              onClick={(): void =>\r\n                                openModal({\r\n                                  label: item.index,\r\n                                  changeAnswer: (value) =>\r\n                                    handleEditor(item.index, value, index + 1),\r\n                                })\r\n                              }\r\n                            />\r\n                          </EditorFont>\r\n                        </CardItem>\r\n                      );\r\n                    })}\r\n                  </CardBox>\r\n                </CarouselItem>\r\n              );\r\n            })}\r\n          </Carousel>\r\n        </CarouseBox>\r\n        <ButtonBox>\r\n          <ButtonBlank />\r\n          <ButtonBoxInner>\r\n            {selectIndex + 1 === examQuestion.length ? (\r\n              <Button type=\"primary\" onClick={handleSubmit}>\r\n                提交并查看结果\r\n              </Button>\r\n            ) : (\r\n              <Button type=\"primary\" onClick={handleQuestionChange}>\r\n                下一题\r\n              </Button>\r\n            )}\r\n          </ButtonBoxInner>\r\n        </ButtonBox>\r\n      </Page>\r\n      <LayerContainer effect=\"bottom\" needCloseTag visible={showResult}>\r\n        <ResultSheet\r\n          hide={(): void => setShowResult(false)}\r\n          type=\"exam\"\r\n          selectAnswer={answerMap}\r\n          timeCounter={18}\r\n        />\r\n      </LayerContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Exam;\r\n"],"sourceRoot":""}