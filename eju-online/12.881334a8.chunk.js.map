{"version":3,"sources":["pages/Library/Topic/Topic.tsx"],"names":["Topic","openModal","answerSheet","useState","answerMap","setAnswerMap","selectIndex","setSelectIndex","showResult","setShowResult","dispatch","useContext","ProviderContext","getUrlParams","subject","tagId","tag","useQuery","TOPIC_QUESTION","variables","data","loading","topicQuestions","history","useHistory","useEffect","type","topic","hide","document","getElementById","scrollTo","length","id","color","onClick","go","dots","style","height","afterChange","current","setTimeout","selectedIndex","map","topicItem","index","questionId","question","checkAnswers","_id","preAnswer","key","className","getMathpix","val","item","label","changeAnswer","value","questionNum","cuttent","handleEditor","topicSelectAnswer","Layer","effect","needCloseTag","visible","selectAnswer","timeCounter"],"mappings":"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","file":"12.881334a8.chunk.js","sourcesContent":["import { Icon, Carousel, Button, Toast } from 'antd-mobile';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { TOPIC_QUESTION } from '@/helpers/APIHelper';\r\nimport getUrlParams from '@/utils/get-url-params';\r\nimport { ExamQuestionItem } from '@/reducer/reducer';\r\n// import { letterStr } from '@/constants/globalDatas';\r\nimport { ProviderContext } from '@/reducer/context';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { LayerContainer } from '@/components/Layer';\r\nimport answerSheet from './answerSheet';\r\nimport { ResultSheet } from './resultSheet';\r\nimport {\r\n  Page,\r\n  HeaderBox,\r\n  GrayFont,\r\n  FontContent,\r\n  CarouselItem,\r\n  CarouseBox,\r\n  ButtonBox,\r\n  ButtonBoxInner,\r\n  CardBox,\r\n  CardItem,\r\n  EditorFont,\r\n  EditorIcon,\r\n  ButtonBlank,\r\n  HeaderInner,\r\n  HeaderBlank,\r\n} from '../styles';\r\nimport getMathpix from '../utils/getMathpix';\r\n\r\nconst Topic: React.FC = () => {\r\n  const { openModal } = answerSheet();\r\n  const [answerMap, setAnswerMap] = useState({});\r\n  const [selectIndex, setSelectIndex] = useState(0); // 选择题目项\r\n  const [showResult, setShowResult] = useState(false); // 展示答题卡结果\r\n  const { dispatch } = useContext(ProviderContext);\r\n  const { subject, tagId, tag } = getUrlParams();\r\n\r\n  const { data, loading } = useQuery(TOPIC_QUESTION, {\r\n    variables: { subject, tagId },\r\n  });\r\n  const { topicQuestions } = data || {};\r\n  console.log('data+++++', data);\r\n  console.log('loading+++++', loading);\r\n  const history = useHistory();\r\n\r\n  // 回显选中的答案\r\n  const handleEditor = (\r\n    type: string,\r\n    value: string,\r\n    questionNum: number\r\n  ): void => {\r\n    const preAnswer: { [key: string]: string } =\r\n      answerMap[questionNum as keyof typeof answerMap] || {};\r\n    preAnswer[type] = value;\r\n\r\n    setAnswerMap((cuttent) => {\r\n      return {\r\n        ...cuttent,\r\n        [questionNum]: preAnswer,\r\n      };\r\n    });\r\n  };\r\n  // 提交\r\n  const handleSubmit = (): void => {\r\n    dispatch?.({ type: 'setTopicSelectAnswer', topicSelectAnswer: answerMap });\r\n\r\n    setShowResult(true);\r\n  };\r\n\r\n  // 切换题目\r\n  const handleQuestionChange = (): void => {\r\n    setSelectIndex((current) => current + 1);\r\n  };\r\n\r\n  // 缓存在state中正确答案\r\n  useEffect(() => {\r\n    console.log('useEffect++++', topicQuestions);\r\n    dispatch?.({\r\n      type: 'setTopic',\r\n      topic: topicQuestions,\r\n    });\r\n  }, [dispatch, topicQuestions]);\r\n  // 加载loading\r\n  useEffect(() => {\r\n    loading ? Toast.loading('加载中', 0) : Toast.hide();\r\n  }, [loading]);\r\n  // 切换题目时回滚到最顶端\r\n  useEffect(() => {\r\n    document.getElementById('topic_page')?.scrollTo(0, 0);\r\n  }, [selectIndex]);\r\n  return (\r\n    <>\r\n      {topicQuestions && topicQuestions.length > 0 && (\r\n        <Page id=\"topic_page\">\r\n          <HeaderBox>\r\n            <HeaderBlank />\r\n            <HeaderInner>\r\n              <Icon\r\n                type=\"cross\"\r\n                color=\"#262626\"\r\n                onClick={(): void => history.go(-1)}\r\n              />\r\n              <GrayFont>00:18</GrayFont>\r\n            </HeaderInner>\r\n          </HeaderBox>\r\n          <CarouseBox>\r\n            <Carousel\r\n              dots={false}\r\n              style={{ height: '100%' }}\r\n              afterChange={(current: number): void => {\r\n                setTimeout(() => {\r\n                  setSelectIndex(current);\r\n                }, 500);\r\n              }}\r\n              selectedIndex={selectIndex}\r\n            >\r\n              {topicQuestions?.map(\r\n                (topicItem: ExamQuestionItem, index: number) => {\r\n                  const { questionId, question, checkAnswers, _id } = topicItem;\r\n                  // const letterTemp = letterStr.split('');\r\n                  const prevNum = index + 1;\r\n                  const preAnswer =\r\n                    answerMap[prevNum as keyof typeof answerMap] || {};\r\n                  return (\r\n                    <CarouselItem key={_id}>\r\n                      <HeaderBox className=\"lr-pd\">\r\n                        <GrayFont>\r\n                          {questionId} {tag}\r\n                        </GrayFont>\r\n                        <GrayFont>\r\n                          {index + 1}/{topicQuestions?.length}\r\n                        </GrayFont>\r\n                      </HeaderBox>\r\n                      <FontContent>{getMathpix(question)}</FontContent>\r\n                      <CardBox>\r\n                        <CardItem>解答</CardItem>\r\n                        {checkAnswers.map((val) => {\r\n                          // 获取答案label\r\n                          // const itemLabel = letterTemp\r\n                          //   .splice(0, item.length)\r\n                          //   .join('');\r\n                          const item = val[0];\r\n                          return (\r\n                            <CardItem key={item.index}>\r\n                              <span>{item.index}</span>\r\n                              <EditorFont>\r\n                                <span>\r\n                                  {\r\n                                    preAnswer[\r\n                                      item.index as keyof typeof preAnswer\r\n                                    ]\r\n                                  }\r\n                                </span>\r\n                                <EditorIcon\r\n                                  onClick={(): void =>\r\n                                    openModal({\r\n                                      label: item.index,\r\n                                      changeAnswer: (value) =>\r\n                                        handleEditor(\r\n                                          item.index,\r\n                                          value,\r\n                                          index + 1\r\n                                        ),\r\n                                    })\r\n                                  }\r\n                                />\r\n                              </EditorFont>\r\n                            </CardItem>\r\n                          );\r\n                        })}\r\n                      </CardBox>\r\n                    </CarouselItem>\r\n                  );\r\n                }\r\n              )}\r\n            </Carousel>\r\n          </CarouseBox>\r\n          <ButtonBox>\r\n            <ButtonBlank />\r\n            <ButtonBoxInner>\r\n              {selectIndex + 1 === topicQuestions?.length ? (\r\n                <Button type=\"primary\" onClick={handleSubmit}>\r\n                  提交并查看结果\r\n                </Button>\r\n              ) : (\r\n                <Button type=\"primary\" onClick={handleQuestionChange}>\r\n                  下一题\r\n                </Button>\r\n              )}\r\n            </ButtonBoxInner>\r\n          </ButtonBox>\r\n        </Page>\r\n      )}\r\n      <LayerContainer effect=\"bottom\" needCloseTag visible={showResult}>\r\n        <ResultSheet\r\n          hide={(): void => setShowResult(false)}\r\n          type=\"topic\"\r\n          selectAnswer={answerMap}\r\n          tag={tag}\r\n          timeCounter={18}\r\n        />\r\n      </LayerContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Topic;\r\n"],"sourceRoot":""}